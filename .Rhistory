xlab=list(label="Dominant DBH (cm)", fontsize=15),
ylim = c(0, max(SiteForm$Ho.arit.est)),
xlim = c(0, max(SiteForm$Do.arit)),
# main=list(label="Pinus sylvestris dominated plots", fontsize=15),
panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.text(20, 30, "CZ NFI I-II", col = 2, cex = 1.5)
panel.text(20, 27.5, "ES NFI III-IV", col = 3, cex = 1.5)
panel.text(20, 25, "SK NFI I-II", col = 4, cex = 1.5)
})
CZ <- xyplot(Ho.arit.est ~ Do.arit, data = SiteFormCZ, groups = plot,
type = "l", col = alpha(SiteFormCZ$col, SiteFormCZ$alpha), lwd = SiteFormCZ$lwd,
ylab=list(label="Dominant height (m)", fontsize=15),
xlab=list(label="Dominant DBH (cm)", fontsize=15),
ylim = c(0, max(SiteForm$Ho.arit.est)),
xlim = c(0, max(SiteForm$Do.arit)),
# main=list(label="Pinus sylvestris pure plots", fontsize=15),
panel = function(x, y, ...){
panel.xyplot(x, y, ...)
# panel.text(15, 32.5, "CZ NFI I-II", col = 1)
# panel.text(16, 30, "ES NFI III-IV", col = 2)
# panel.text(16, 27.5, "SK NFI I-II", col = 3)
})
ES <- xyplot(Ho.arit.est ~ Do.arit, data = SiteFormES, groups = plot,
type = "l", col = alpha(SiteFormES$col, SiteFormES$alpha), lwd = SiteFormES$lwd,
ylab=list(label="Dominant height (m)", fontsize=15),
xlab=list(label="Dominant DBH (cm)", fontsize=15),
ylim = c(0, max(SiteForm$Ho.arit.est)),
xlim = c(0, max(SiteForm$Do.arit)),
# main=list(label="Pinus sylvestris pure plots", fontsize=15),
panel = function(x, y, ...){
panel.xyplot(x, y, ...)
# panel.text(15, 32.5, "CZ NFI I-II", col = 1)
# panel.text(16, 30, "ES NFI III-IV", col = 2)
# panel.text(16, 27.5, "SK NFI I-II", col = 3)
})
SK <- xyplot(Ho.arit.est ~ Do.arit, data = SiteFormSK, groups = plot,
type = "l", col = alpha(SiteFormSK$col, SiteFormSK$alpha), lwd = SiteFormSK$lwd,
ylab=list(label="Dominant height (m)", fontsize=15),
xlab=list(label="Dominant DBH (cm)", fontsize=15),
ylim = c(0, max(SiteForm$Ho.arit.est)),
xlim = c(0, max(SiteForm$Do.arit)),
# main=list(label="Pinus sylvestris pure plots", fontsize=15),
panel = function(x, y, ...){
panel.xyplot(x, y, ...)
# panel.text(15, 32.5, "CZ NFI I-II", col = 1)
# panel.text(16, 30, "ES NFI III-IV", col = 2)
# panel.text(16, 27.5, "SK NFI I-II", col = 3)
})
SF <- ALL + CZ + ES + SK
print(SF)
data <- SiteForm[, c("plot", "country", "Do.arit", "Ho.arit.est", "country")]
ref.1 <- data.frame(plot = unique(SiteForm$plot),
Do.arit = tapply(SiteForm$Do.arit, SiteForm$plot, max),
Ho.arit.est = tapply(SiteForm$Ho.arit.est, SiteForm$plot, max))
ref.2 <- data.frame(plot = unique(SiteForm$plot),
Do.arit.ref = tapply(SiteForm$Do.arit, SiteForm$plot, min),
Ho.arit.est.ref = tapply(SiteForm$Ho.arit.est, SiteForm$plot, min))
ref <- merge(ref.1, ref.2, by = "plot")
data <- merge(data[, c("plot", "country")], ref, by = "plot", all = TRUE)
data <- data[duplicated(data), ]
colnames(data) <- c("plot", "country", "t", "H", "t0", "H0")
data$plot <- 1:nrow(data)
table(data$country)
rm(list=ls())
setwd("G:/Mi unidad/PosDoc/MaximumBiomassStockCapacity")
# Libraries
library(dplyr)
library(gridExtra)
library(lattice)
library(latticeExtra)
library(minpack.lm)
library(nlme)
library(scales)
library(quantreg)
#### Functions ####
# Bertalanffy-Richards ----
# Bertalanffy-Richards ADA model considering parameter "a" as site-specific
br.a <- function(h1, t1, t2, b, c){
h2 <- 1.3 + ((h1 - 1.3) * (1 - exp(-b * t2)) ^ c) / ((1 - exp(-b * t1)) ^ c)
return(h2)
}
# Bertalanffy-Richards ADA model considering parameter "b" as site-specific
br.b <- function(h1, t1, t2, a, c){
h2 <- 1.3 + a * (1 - (1 - ((h1 - 1.3) / a) ^ (1 / c)) ^ (t2 / t1)) ^ c
return(h2)
}
# Bertalanffy-Richards ADA model considering parameter "c" as site-specific
br.c <- function(h1, t1, t2, a, b){
h2 <- 1.3 + a * (1 - exp(-b * t2)) ^ (log((h1 - 1.3) / a) / log(1 - exp(-b * t1)))
return(h2)
}
# Bertalanffy-Richards GADA model
br.GADA <- function(h1, t1, t2, a, b, c){
L0 <- log(1 - exp(-a * t1))
X0 <- 0.5 * ((log(h1) - b * L0) + sqrt((log(h1) - b * L0) ^ 2 - 4 * c * L0))
h2 <- h1 * ((1 - exp(-a * t2)) / (1 - exp(-a * t1))) ^ ((b + c) / X0)
return(h2)
}
# Korf ----
# Korf ADA model considering parameter "b" as site-specific
PredictHeightKorfADA_SF <- function(h1, t1, t2, a, c){
h2 <- 1.3 + a * ((h1 - 1.3) / a) ^ (t1 / t2) ^ c
return(h2)
}
# Korf GADA model
PredictHeightKorfGADA_SF <- function(h1, t1, t2, a, b, c){
X0 <- 0.5 * t1 ^ -c * (a + t1 ^ c * log(h1) + sqrt(4 * b * t1 ^ c + (-a - t1 ^ c * log(h1)) ^ 2))
h2 <- exp(X0) * exp(-(a + (b / X0)) * t2 ^ -c)
return(h2)
}
PredictHeightKorfGADA_SF <- function(h1, t1, t2, a, b, c){
X0 <- 0.5 * t1 ^ -c * (a + t1 ^ c * log(h1 - 1.3) + sqrt(4 * b * t1 ^ c + (-a - t1 ^ c * log(h1 - 1.3)) ^ 2))
h2 <- 1.3 + exp(X0) * exp(-(a + (b / X0)) * t2 ^ -c)
return(h2)
}
# Hossfeld IV ----
# GADA formulation of the Hossfeld IV yield function
# a1 = X, a2 = b / X
PredictHeightHossfeldIVGADA_SF <- function(h1, t1, t2, a, b, c){
X0 <- 0.5 * ((h1 - 1.3) + sqrt((h1 - 1.3) ^ 2 - 4 * b * t1 ^ -c * (1.3 - h1)))
h2 <- 1.3 + X0 / (1 + b / X0 * t2 ^ -c)
return(h2)
}
# GADA formulation of the Hossfeld IV yield function
# a1 = X, a2 = b * X
PredictHeightHossfeldIVGADA2_SF <- function(h1, t1, t2, a, b, c){
X0 <- (h1 - a) / (1 - b * h1 * t1 ^ -c)
h2 <- X0 / (1 + b + X0 * t2 ^ -c)
return(h2)
}
#### Load data ####
# treeCZ <- read.csv("treeCZ.csv")
# treeES <- read.csv("treeES.csv")
# treeSK <- read.csv("treeSK.csv")
SiteForm <- read.csv("SiteForm.csv")
SiteFormCZ <- SiteForm[SiteForm$country == "CZ", ]
SiteFormES <- SiteForm[SiteForm$country == "ES", ]
SiteFormSK <- SiteForm[SiteForm$country == "SK", ]
SiteFormCZ$col <- 2
SiteFormES$col <- 3
SiteFormSK$col <- 4
SiteFormCZ$alpha <- 0.5
SiteFormES$alpha <- 0.5
SiteFormSK$alpha <- 0.75
SiteFormCZ$lwd <- 1
SiteFormES$lwd <- 1
SiteFormSK$lwd <- 2
SiteForm <- SiteForm[SiteForm$country != "EE", ]
SiteForm$col <- ifelse(SiteForm$country == "CZ", 2,
ifelse(SiteForm$country == "ES", 3, 4))
SiteForm$alpha <- ifelse(SiteForm$country == "CZ", 0.5,
ifelse(SiteForm$country == "ES", 0.5, 0.75))
SiteForm$lwd <- ifelse(SiteForm$country == "CZ", 1,
ifelse(SiteForm$country == "ES", 1, 2))
boxplot(SiteForm$N~SiteForm$country)
boxplot(SiteForm$hm~SiteForm$country)
boxplot(SiteForm$dg~SiteForm$country)
boxplot(SiteForm$W~SiteForm$country)
# H~D ----
ALL <- xyplot(Ho.arit.est ~ Do.arit, data = SiteForm, groups = plot,
type = "l", col = alpha(SiteForm$col, 0), lwd = SiteForm$lwd,
ylab=list(label="Dominant height (m)", fontsize=15),
xlab=list(label="Dominant DBH (cm)", fontsize=15),
ylim = c(0, max(SiteForm$Ho.arit.est)),
xlim = c(0, max(SiteForm$Do.arit)),
# main=list(label="Pinus sylvestris dominated plots", fontsize=15),
panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.text(20, 30, "CZ NFI I-II", col = 2, cex = 1.5)
panel.text(20, 27.5, "ES NFI III-IV", col = 3, cex = 1.5)
panel.text(20, 25, "SK NFI I-II", col = 4, cex = 1.5)
})
CZ <- xyplot(Ho.arit.est ~ Do.arit, data = SiteFormCZ, groups = plot,
type = "l", col = alpha(SiteFormCZ$col, SiteFormCZ$alpha), lwd = SiteFormCZ$lwd,
ylab=list(label="Dominant height (m)", fontsize=15),
xlab=list(label="Dominant DBH (cm)", fontsize=15),
ylim = c(0, max(SiteForm$Ho.arit.est)),
xlim = c(0, max(SiteForm$Do.arit)),
# main=list(label="Pinus sylvestris pure plots", fontsize=15),
panel = function(x, y, ...){
panel.xyplot(x, y, ...)
# panel.text(15, 32.5, "CZ NFI I-II", col = 1)
# panel.text(16, 30, "ES NFI III-IV", col = 2)
# panel.text(16, 27.5, "SK NFI I-II", col = 3)
})
ES <- xyplot(Ho.arit.est ~ Do.arit, data = SiteFormES, groups = plot,
type = "l", col = alpha(SiteFormES$col, SiteFormES$alpha), lwd = SiteFormES$lwd,
ylab=list(label="Dominant height (m)", fontsize=15),
xlab=list(label="Dominant DBH (cm)", fontsize=15),
ylim = c(0, max(SiteForm$Ho.arit.est)),
xlim = c(0, max(SiteForm$Do.arit)),
# main=list(label="Pinus sylvestris pure plots", fontsize=15),
panel = function(x, y, ...){
panel.xyplot(x, y, ...)
# panel.text(15, 32.5, "CZ NFI I-II", col = 1)
# panel.text(16, 30, "ES NFI III-IV", col = 2)
# panel.text(16, 27.5, "SK NFI I-II", col = 3)
})
SK <- xyplot(Ho.arit.est ~ Do.arit, data = SiteFormSK, groups = plot,
type = "l", col = alpha(SiteFormSK$col, SiteFormSK$alpha), lwd = SiteFormSK$lwd,
ylab=list(label="Dominant height (m)", fontsize=15),
xlab=list(label="Dominant DBH (cm)", fontsize=15),
ylim = c(0, max(SiteForm$Ho.arit.est)),
xlim = c(0, max(SiteForm$Do.arit)),
# main=list(label="Pinus sylvestris pure plots", fontsize=15),
panel = function(x, y, ...){
panel.xyplot(x, y, ...)
# panel.text(15, 32.5, "CZ NFI I-II", col = 1)
# panel.text(16, 30, "ES NFI III-IV", col = 2)
# panel.text(16, 27.5, "SK NFI I-II", col = 3)
})
png("G:/Mi unidad/PosDoc/MaximumBiomassStockCapacity/figures/H0_D0_CZ_ES_SK_separated.png",
width = 15, height = 15, units = "cm", res = 300)
print(c(CZ, SK, ES))
dev.off()
png("G:/Mi unidad/PosDoc/MaximumBiomassStockCapacity/figures/H0_D0_CZ_ES_SK_together.png",
width = 15, height = 15, units = "cm", res = 300)
SF <- ALL + CZ + ES + SK
print(SF)
dev.off()
rm(list=ls())
setwd("G:/Mi unidad/PosDoc/MaximumBiomassStockCapacity")
# Libraries
library(dplyr)
library(gridExtra)
library(lattice)
library(latticeExtra)
library(minpack.lm)
library(nlme)
library(scales)
#### Load data ####
treeCZ <- read.csv("treeCZ.csv")
treeES <- read.csv("treeES.csv")
treeSK <- read.csv("treeSK.csv")
# SiteFormEE <- read.csv("SiteFormEE.csv")
SiteFormCZ <- read.csv("SiteFormCZ.csv")
SiteFormES <- read.csv("SiteFormES.csv")
SiteFormSK <- read.csv("SiteFormSk.csv")
#### Cheking heights - CZ ----
png("G:/Mi unidad/PosDoc/MaximumBiomassStockCapacity/figures/H_D_DominantTress.png",
width = 17.5, height = 10, units = "cm", res = 300)
par(mfrow = c(1,3))
CZ <- data.frame(ID = as.numeric(), H = as.numeric(), H_D = as.numeric(), N.arbol = as.numeric())
x <- sample(unique(treeCZ$ID), size = 50)
for(i in c(1:20)){
for(j in x){
datos <- treeCZ[treeCZ$ID == j & is.na(treeCZ$dead), ]
ajuste <- lm(h ~ log10(dbh), data = treeCZ[treeCZ$plot == datos$plot[1], ])
datos$h <- ifelse(is.na(datos$h),
coef(ajuste)[1] + coef(ajuste)[2] * log10(datos$dbh), datos$h)
datos <- datos[order(datos$dbh, decreasing = TRUE), ]
H <- mean(datos$h[1:i], na.rm = TRUE)
HD <- mean(datos$h[1:i], na.rm = TRUE) / mean(datos$dbh[1:i], na.rm = TRUE)
out <- data.frame(ID = j, H = H, H_D = HD, N.arbol = i)
CZ <- rbind(CZ, out)
}
}
plot(0, xaxt='n',yaxt='n',pch='',
xlim=c(0,20),
ylim=c(0,1.1),
xlab="Dominant trees per plot",
ylab=expression(italic("H"[0])~"/"~italic("D"[0])))
for(i in unique(CZ$ID)){
datos <- CZ[which(CZ$ID == i), ]
lines(datos$N.arbol, datos$H_D, col = sample(1:100, 1))
}
abline(v=10, col = "red", lty = 2)
legend("topleft", "CZ", bty="n")
axis(1)
axis(2)
SiteFormCZ <- SiteFormCZ[which(SiteFormCZ$n_dbh >= 10), ]
# Setecting plots measured two times
filter <- data.frame(plot = unique(SiteFormCZ$plot),
times = tapply(SiteFormCZ$plot, SiteFormCZ$plot, length))
filter <- filter[filter$times > 1, ]
SiteFormCZ <- SiteFormCZ[SiteFormCZ$plot %in% filter$plot, ]
SiteFormCZ$filter.1 <- rep(SiteFormCZ[SiteFormCZ$NFI == "2", "Ho.arit.est"], each = 2)
SiteFormCZ$filter.2 <- rep(SiteFormCZ[SiteFormCZ$NFI == "1", "Ho.arit.est"], each = 2)
SiteFormCZ$filter <- ifelse(SiteFormCZ$Ho.arit.est <= SiteFormCZ$filter.1 &
SiteFormCZ$Ho.arit.est >= SiteFormCZ$filter.2, 1, 2)
SiteFormCZ <- SiteFormCZ[SiteFormCZ$filter == "1", ]
SiteFormCZ$filter.1 <- rep(SiteFormCZ[SiteFormCZ$NFI == "2", "Do.arit"], each = 2)
SiteFormCZ$filter.2 <- rep(SiteFormCZ[SiteFormCZ$NFI == "1", "Do.arit"], each = 2)
SiteFormCZ$filter <- ifelse(SiteFormCZ$Do.arit <= SiteFormCZ$filter.1 &
SiteFormCZ$Do.arit >= SiteFormCZ$filter.2, 1, 2)
SiteFormCZ <- SiteFormCZ[SiteFormCZ$filter == "1", ]
SF <- xyplot(Ho.arit.est ~ Do.arit, data = SiteFormCZ, groups = plot, type = "l", col = "grey",
ylab=list(label="Dominant height (m)", fontsize=15),
xlab=list(label="Dominant DBH (cm)", fontsize=15))
# print(SF)
#### Cheking heights - SK ----
SK <- data.frame(ID = as.numeric(), H = as.numeric(), H_D = as.numeric(), N.arbol = as.numeric())
x <- sample(unique(treeSK$ID), size = 44)
for(i in c(1:20)){
for(j in x){
datos <- treeSK[treeSK$ID == j & is.na(treeSK$dead), ]
ajuste <- lm(h ~ log10(dbh), data = treeSK[treeSK$plot == datos$plot[1], ])
datos$h <- ifelse(is.na(datos$h),
coef(ajuste)[1] + coef(ajuste)[2] * log10(datos$dbh), datos$h)
datos <- datos[order(datos$dbh, decreasing = TRUE), ]
H <- mean(datos$h[1:i], na.rm = TRUE)
HD <- mean(datos$h[1:i], na.rm = TRUE) / mean(datos$dbh[1:i], na.rm = TRUE)
out <- data.frame(ID = j, H = H, H_D = HD, N.arbol = i)
SK <- rbind(SK, out, datos$H_D, col = sample(1:100, 1))
}
}
plot(0, xaxt='n',yaxt='n',pch='',
xlim=c(0,20),
ylim=c(0,1.1),
xlab="Dominant trees per plot",
ylab=expression(italic("H"[0])~"/"~italic("D"[0])))
for(i in unique(SK$ID)){
datos <- SK[which(SK$ID == i), ]
lines(datos$N.arbol, datos$H_D, col = sample(1:100, 1))
}
abline(v=10, col = "red", lty = 2)
legend("topleft", "SK", bty="n")
axis(1)
axis(2)
SiteFormSK <- SiteFormSK[which(SiteFormSK$n_dbh >= 10), ]
# Setecting plots measured two times
filter <- data.frame(plot = unique(SiteFormSK$plot),
times = tapply(SiteFormSK$plot, SiteFormSK$plot, length))
filter <- filter[filter$times > 1, ]
SiteFormSK <- SiteFormSK[SiteFormSK$plot %in% filter$plot, ]
SiteFormSK$filter.1 <- rep(SiteFormSK[SiteFormSK$NFI == "2", "Ho.arit.est"], each = 2)
SiteFormSK$filter.2 <- rep(SiteFormSK[SiteFormSK$NFI == "1", "Ho.arit.est"], each = 2)
SiteFormSK$filter <- ifelse(SiteFormSK$Ho.arit.est <= SiteFormSK$filter.1 &
SiteFormSK$Ho.arit.est >= SiteFormSK$filter.2, 1, 2)
SiteFormSK <- SiteFormSK[SiteFormSK$filter == "1", ]
SiteFormSK$filter.1 <- rep(SiteFormSK[SiteFormSK$NFI == "2", "Do.arit"], each = 2)
SiteFormSK$filter.2 <- rep(SiteFormSK[SiteFormSK$NFI == "1", "Do.arit"], each = 2)
SiteFormSK$filter <- ifelse(SiteFormSK$Do.arit <= SiteFormSK$filter.1 &
SiteFormSK$Do.arit >= SiteFormSK$filter.2, 1, 2)
SiteFormSK <- SiteFormSK[SiteFormSK$filter == "1", ]
SF <- xyplot(Ho.arit.est ~ Do.arit, data = SiteFormSK, groups = plot, type = "l", col = "grey",
ylab=list(label="Dominant height (m)", fontsize=15),
xlab=list(label="Dominant DBH (cm)", fontsize=15))
# print(SF)
#### Cheking heights - ES ----
ES <- data.frame(ID = as.numeric(), H = as.numeric(), H_D = as.numeric(), N.arbol = as.numeric())
x <- sample(unique(treeES$ID), size = 50)
for(i in c(1:20)){
for(j in x){
datos <- treeES[treeES$ID == j & is.na(treeES$dead), ]
datos <- datos[order(datos$dbh, decreasing = TRUE), ]
H <- mean(datos$h[1:i], na.rm = TRUE)
HD <- mean(datos$h[1:i], na.rm = TRUE) / mean(datos$dbh[1:i], na.rm = TRUE)
out <- data.frame(ID = j, H = H, H_D = HD, N.arbol = i)
ES <- rbind(ES, out)
}
}
plot(0, xaxt='n',yaxt='n',pch='',
xlim=c(0,20),
ylim=c(0,1.1),
xlab="Dominant trees per plot",
ylab=expression(italic("H"[0])~"/"~italic("D"[0])))
for(i in unique(ES$ID)){
datos <- ES[which(ES$ID == i), ]
lines(datos$N.arbol, datos$H_D, col = sample(1:100, 1))
}
abline(v=10, col = "red", lty = 2)
legend("topleft", "ES", bty="n")
axis(1)
axis(2)
SiteFormES <- SiteFormES[which(SiteFormES$n_dbh >= 10), ]
filter <- data.frame(plot = unique(SiteFormES$plot),
times = tapply(SiteFormES$plot, SiteFormES$plot, length))
filter <- filter[filter$times > 1, ]
SiteFormES <- SiteFormES[SiteFormES$plot %in% filter$plot, ]
SiteFormES$filter.1 <- rep(SiteFormES[SiteFormES$NFI == "4", "Ho.arit.est"], each = 2)
SiteFormES$filter.2 <- rep(SiteFormES[SiteFormES$NFI == "3", "Ho.arit.est"], each = 2)
SiteFormES$filter <- ifelse(SiteFormES$Ho.arit.est <= SiteFormES$filter.1 &
SiteFormES$Ho.arit.est >= SiteFormES$filter.2, 1, 2)
SiteFormES <- SiteFormES[SiteFormES$filter == "1", ]
SiteFormES$filter.1 <- rep(SiteFormES[SiteFormES$NFI == "4", "Do.arit"], each = 2)
SiteFormES$filter.2 <- rep(SiteFormES[SiteFormES$NFI == "3", "Do.arit"], each = 2)
SiteFormES$filter <- ifelse(SiteFormES$Do.arit <= SiteFormES$filter.1 &
SiteFormES$Do.arit >= SiteFormES$filter.2, 1, 2)
SiteFormES <- SiteFormES[SiteFormES$filter == "1", ]
SF <- xyplot(Ho.arit.est ~ Do.arit, data = SiteFormES, groups = plot, type = "l", col = "grey",
ylab=list(label="Dominant height (m)", fontsize=15),
xlab=list(label="Dominant DBH (cm)", fontsize=15))
# print(SF)
dev.off()
install.packages("packrat")
?packrat::bundle
packrat::bundle()
packrat::bundle(project = "F:/FORTLS_devel/FORTLS.Rproj")
packrat::init('F:/FORTLS_devel/FORTLS.Rproj')
packrat::init('F:/FORTLS_devel')
getwd()
library(packrat)
packrat::addPackages(c("data.table"))
addPackages(c("data.table"))
getwd()
packrat::snapshot()
packrat::writePackrat()
packrat::addPackages("FORLTS_offline", version = "1.0.0")
packrat::snapshotToFile("FORTLS_offline.tar.gz")
packrat::snapshotToFile("FORTLS_offline.tar.gz")
remotes::install_github("Molina-Valero/FORTLS", ref = "devel", dependencies = TRUE, force = TRUE)
remove.packages("FORTLS")
Sys.getenv("R_LIBS_USER")
Sys.getenv("R_LIBS_USER")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
remove.packages("FORTLS")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
library(FORTLS)
# Specify package names
packages <- c("lidR")
# Specify download directory
download_dir <- "G:/Mi unidad/FORTLS/FORTLS_offline"
# Download binary packages
download.packages(pkgs = packages, destdir = download_dir, type = "win.binary")
remove.packages("lidR")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
# Specify package names
packages <- c("data.table", "dbscan", "Distance", "htmlwidgets", "lidR",
"moments", "plotly", "progress", "raster", "Rcpp",
"RCSF", "reticulate", "scales", "sf", "tidyr", "VoxR", "vroom")
# Download binary packages
download.packages(pkgs = packages, destdir = download_dir, type = "win.binary")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
source("install_script.R")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
# Specify package names
packages <- c("data.table", "dbscan", "Distance", "htmlwidgets", "lidR",
"moments", "plotly", "progress", "raster", "Rcpp", "RcppEigen",
"RCSF", "reticulate", "scales", "sf", "tidyr", "VoxR", "vroom")
# Specify download directory
download_dir <- "G:/Mi unidad/FORTLS/FORTLS_offline"
# Download binary packages
download.packages(pkgs = packages, destdir = download_dir, type = "win.binary")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
remove.packages("RCSF")
source("install_script.R")
remove.packages("lidR")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
source("install_script.R")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
# Specify download directory
download_dir <- "G:/Mi unidad/FORTLS/FORTLS_offline"
# Download binary packages
download.packages(pkgs = packages, destdir = download_dir, type = "source")
# Specify package names
packages <- c("data.table", "dbscan", "Distance", "htmlwidgets", "lidR",
"moments", "plotly", "progress", "raster", "Rcpp", "RcppEigen",
"RCSF", "reticulate", "scales", "sf", "tidyr", "VoxR", "vroom")
# Specify download directory
download_dir <- "G:/Mi unidad/FORTLS/FORTLS_offline"
# Download binary packages
download.packages(pkgs = packages, destdir = download_dir, type = "source")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
source("install_script.R")
# Download binary packages
download.packages(pkgs = packages, destdir = download_dir, type = "binary")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
# Specify package names
packages <- c("devtools", "data.table", "dbscan", "Distance", "htmlwidgets",
"lidR",
"moments", "plotly", "progress", "raster", "Rcpp", "RcppEigen",
"RCSF", "reticulate", "scales", "sf", "tidyr", "VoxR", "vroom")
# Specify download directory
download_dir <- "G:/Mi unidad/FORTLS/FORTLS_offline"
# Download binary packages
download.packages(pkgs = packages, destdir = download_dir, type = "binary")
download.packages(pkgs = packages, destdir = download_dir, type = "source")
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
source("install_script.R")
library(FORTLS)
setwd("C:/pruebas")
library(FORTLS)
library(lidR)
library(FORTLS)
setwd("G:/Mi unidad/FORTLS/FORTLS_offline")
source("install_script.R")
library(dbscan)
remotes::install_github("Molina-Valero/FORTLS", ref = "devel", dependencies = TRUE, force = TRUE)
install.packages("remotes")
remotes::install_github("Molina-Valero/FORTLS", ref = "devel", dependencies = TRUE, force = TRUE)
library(lidR)
library(lidR)
writeLAS()
remotes::install_github("Molina-Valero/FORTLS", ref = "devel", dependencies = TRUE, force = TRUE)
remotes::install_github("Molina-Valero/FORTLS", ref = "devel", dependencies = TRUE, force = TRUE)
install.packages("pkgbuild")
remotes::install_github("Molina-Valero/FORTLS", ref = "devel", dependencies = TRUE, force = TRUE)
install.packages("FORTLS")
remotes::install_github("Molina-Valero/FORTLS", ref = "devel", dependencies = TRUE, force = TRUE)
remove.packages("pkgbuild")
remotes::install_github("Molina-Valero/FORTLS", ref = "devel", dependencies = TRUE, force = TRUE)
remotes::install_github("Molina-Valero/FORTLS", ref = "devel", dependencies = TRUE, force = TRUE)
library(FORTLS)
