[{"path":"/reference/FORTLS-package.html","id":null,"dir":"Reference","previous_headings":"","what":"FORTLS: Automatic Processing of Terrestrial-Based Technologies Point Cloud Data for Forestry Purposes — FORTLS-package","title":"FORTLS: Automatic Processing of Terrestrial-Based Technologies Point Cloud Data for Forestry Purposes — FORTLS-package","text":"Process automation point cloud data derived terrestrial-based technologies Terrestrial Laser Scanner (TLS) Simultaneous Localization Mapping (SLAM). 'FORTLS' enables () detection trees estimation tree-level attributes (e.g. diameters heights), (ii) estimation stand-level variables (e.g. density, basal area, mean dominant height), (iii) computation metrics related important forest attributes estimated Forest Inventories stand-level, (iv) optimization plot design combining TLS data field measured data. Documentation 'FORTLS' described Molina-Valero et al. (2022, <doi:10.1016/j.envsoft.2022.105337>).","code":""},{"path":"/reference/FORTLS-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FORTLS: Automatic Processing of Terrestrial-Based Technologies Point Cloud Data for Forestry Purposes — FORTLS-package","text":"Usage FORTLS includes following functionalities: Tree detection: first necessary step functionalities FORTLS. can achieved using following functions: normalize: mandatory first step obtaining relative coordinates TLS point cloud. tree.detection.single.scan: detects many trees possible normalized TLS single-scan point clouds. tree.detection.multi.scan: detects many trees possible normalized TLS multi-scan, SLAM, similar terrestrial-based technologies point clouds. tree.detection.several.plots: includes two previous functions better workflow several plots sequentially analyzed. Estimation variables field data available: main functionality FORTLS can achieved using following functions: distance.sampling: optional function can used considering methodologies correcting occlusion effects estimating variables. estimation.plot.size: enables best plot design determined basis TLS data . metrics.variables: used estimating metrics variables potentially related forest attributes stand level. Estimation variables field data available: main desirable functionality FORTLS can achieved using following functions: distance.sampling: . simulations: computes simulations TLS field data different plot designs. prior step next functions. relative.bias: uses simulations output assess accuracy direct estimations variables according homologous TLS field data. correlations: uses simulations output assess correlations among metrics variables obtained TLS data, variables interest estimated field data. optimize.plot.design: using correlations output, represents best correlations variables interest according plot design. thus possible select best plot design estimating forest attributes TLS data. metrics.variables: , case plot parameters choosen basis field data better estimates therefore obtained.","code":""},{"path":"/reference/FORTLS-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"FORTLS: Automatic Processing of Terrestrial-Based Technologies Point Cloud Data for Forestry Purposes — FORTLS-package","text":"Maintainer: Juan Alberto Molina-Valero juanalberto.molina.valero@usc.es [copyright holder] Authors: María José Ginzo Villamayor [contributor] Manuel Antonio Novo Pérez [contributor] Adela Martínez-Calvo [contributor] Juan Gabriel Álvarez-González [contributor] Fernando Montes [contributor] César Pérez-Cruzado [contributor]","code":""},{"path":"/reference/FORTLS-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"FORTLS: Automatic Processing of Terrestrial-Based Technologies Point Cloud Data for Forestry Purposes — FORTLS-package","text":"Molina-Valero J. ., Ginzo-Villamayor M. J., Novo Pérez M. ., Martínez-Calvo ., Álvarez-González J. G., Montes F., & Pérez-Cruzado C. (2019). FORTLS: R package processing TLS data estimating stand variables forest inventories. 1st International Electronic Conference Forests — Forests Better Future: Sustainability, Innovation, Interdisciplinarity. doi:10.3390/IECF2020-08066","code":""},{"path":"/reference/Rioja.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Inventoried Plots Data for a Stand Case Study in La Rioja — Rioja.data","title":"Inventoried Plots Data for a Stand Case Study in La Rioja — Rioja.data","text":"list includes trees detected TLS 16 single scans corresponding plots located La Rioja, region Spain, north Iberian Peninsula (first element), well inventoried field 16 plots (second element). Plot attributes related stand stratum also included (third element). elements list follows: tree.tls: data frame includes list trees detected tree.detection.single.scan 16 TLS single-scan sampling points. following variables provided tree (see tree.detection.single.scan ‘Value’ details): tree.list.field: data frame includes list trees measured 16 circular fixed area plots radius 20 m, whose centres coincide TLS single-scans points. following variables provided tree:","code":""},{"path":"/reference/Rioja.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inventoried Plots Data for a Stand Case Study in La Rioja — Rioja.data","text":"","code":"data(Rioja.data)"},{"path":"/reference/Rioja.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Inventoried Plots Data for a Stand Case Study in La Rioja — Rioja.data","text":"List 2 data frames containing 604 observations 17 variables (tree.tls) 659 observations 11 variables (tree.field).","code":""},{"path":"/reference/Rioja.simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Metrics and Variables for a Stand Case Study in La Rioja — Rioja.simulations","title":"Simulated Metrics and Variables for a Stand Case Study in La Rioja — Rioja.simulations","text":"list contains metrics variables estimated field data TLS data Rioja.data. elements list correspond simulations ‘Value’, follows: fixed.area: data frame TLS metrics variables estimated basis simulated plots fixed area plot design radius increment 0.1 m (smallest possible radius 20 m). following variables provided pair (plot, radius) (see simulations ‘Value’ details): k.tree: data frame TLS metrics variables estimated basis simulated plots k-tree plot design incremental values 1 tree (1 largest number trees one plot). following variables provided pair (plot, k) (see simulations ‘Value’ details): angle.count: data frame TLS metrics variables estimated basis simulated plots angle-count plot design. plots simulated correlative angle-count plots incremental values 0.1 \\({m}^{2}/ha\\) BAF. following variables provided pair (plot, BAF) (see simulations ‘Value’ details):","code":""},{"path":"/reference/Rioja.simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Metrics and Variables for a Stand Case Study in La Rioja — Rioja.simulations","text":"","code":"data(Rioja.simulations)"},{"path":"/reference/Rioja.simulations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Metrics and Variables for a Stand Case Study in La Rioja — Rioja.simulations","text":"List 3 data frames containing 2224 observations 74 variables (simulations.fixed.area.plot), 272 observations 74 variables (simulations.k.tree.plot), 576 observations 62 variables (simulations.angle.count.plot).","code":""},{"path":"/reference/angle_count_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dominant diameters and heights for simulations for angle-count plots. — angle_count_cpp","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — angle_count_cpp","text":"Calculate dominant diameters heights simulations angle-count plots.","code":""},{"path":"/reference/angle_count_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — angle_count_cpp","text":"","code":"angle_count_cpp(baf_seq, baf, d, h, num)"},{"path":"/reference/angle_count_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — angle_count_cpp","text":"baf_seq BAF sequence simulations baf BAF masimum simulations d vector diameters opf trees h vector heights trees num number trees considered calculating diameter dominant height","code":""},{"path":"/reference/angle_count_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — angle_count_cpp","text":"Data frame.","code":""},{"path":"/reference/angle_count_cpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — angle_count_cpp","text":"Juan Alberto Molina-Valero, María José Ginzo Villamayor, Manuel Antonio Novo Pérez, Adela Martínez-Calvo, Juan Gabriel Álvarez-González, Fernando Montes César Pérez-Cruzado.","code":""},{"path":"/reference/correlations.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation Between Field Estimations and TLS Metrics — correlations","title":"Correlation Between Field Estimations and TLS Metrics — correlations","text":"Computes correlations variables estimates field data metrics derived TLS data. Field estimates TLS metrics common set plots required order compute correlations. data must obtained three different plot designs currently available (fixed area, k-tree angle-count), correspond plots incremental values plot design parameter (radius, k BAF, respectively). Two correlation measures implemented: Pearson's correlation coefficient Spearman's rho. addition estimating measures, tests association also executed, interactive line charts graphically representing correlations generated.","code":""},{"path":"/reference/correlations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation Between Field Estimations and TLS Metrics — correlations","text":"","code":"correlations(simulations,              variables = c(\"N\", \"G\", \"V\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\"),              method = c(\"pearson\", \"spearman\"), save.result = TRUE,              dir.result = NULL)"},{"path":"/reference/correlations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation Between Field Estimations and TLS Metrics — correlations","text":"simulations List including estimated variables based field data metrics   derived TLS data. structure format must analogous output   returned simulations function. Specifically, must   least one following named elements: fixed.area.plot: data frame field estimates TLS       metrics circular fixed area plot design. row corresponds       (plot, radius) pair, following       columns included: Plot identification radius: id, radius: description format           indicated named columns fixed.area.plot           simulations ‘Value’. Variables estimated basis simulated field plots: N, G, V, d, dg,           dgeom, dharm, h, hg, hgeom,           hharm, d.0, dg.0, dgeom.0,           dharm.0, h.0, hg.0, hgeom.0,           hharm.0: description format indicated           named columns fixed.area.plot simulations ‘Value’. TLS metrics derived simulated TLS plots: N.tls, N.hn, N.hr, N.hn.cov,           N.hr.cov, N.sh, num.points, num.points.est, num.points.hom,           num.points.hom.est, G.tls, G.hn,           G.hr, G.hn.cov, G.hr.cov, G.sh,           V.tls, V.hn, V.hr, V.hn.cov, V.hr.cov, V.sh, d.tls, dg.tls,           dgeom.tls, dharm.tls, h.tls, hg.tls,           hgeom.tls, hharm.tls, d.0.tls, dg.0.tls,           dgeom.0.tls, dharm.0.tls, h.0.tls,           hg.0.tls, hgeom.0.tls, hharm.0.tls, P01,           P05, P10, P20, P25, P30,           P40, P50, P60, P70, P75,           P80, P90, P95, P99: description           format indicated named columns fixed.area.plot           simulations ‘Value’. fixed.area.plot element included simulations       argument, must contain least id radius columns,       one field estimates columns one TLS metrics       columns. k.tree.plot: data frame field estimates TLS       metrics k-tree plot design. row corresponds       (plot, k) pair, following columns included: Plot identification k: id, k: description format indicated           named columns k.tree.plot codesimulations ‘Value’. Variables estimates basis simulated field plots: N, G, V, d, dg,           dgeom, dharm, h, hg, hgeom,           hharm, d.0, dg.0, dgeom.0,           dharm.0, h.0, hg.0, hgeom.0,           hharm.0: description format indicated           named columns k.tree.plot simulations ‘Value’. TLS metrics derived simulated TLS plots: N.tls, N.hn, N.hr, N.hn.cov,           N.hr.cov, N.sh, num.points, num.points.est, num.points.hom,           num.points.hom.est, G.tls, G.hn,           G.hr, G.hn.cov, G.hr.cov, G.sh,           V.tls, V.hn, V.hr, V.hn.cov,           V.hr.cov, V.sh, d.tls, dg.tls,           dgeom.tls, dharm.tls, h.tls, hg.tls,           hgeom.tls, hharm.tls, d.0.tls, dg.0.tls,           dgeom.0.tls, dharm.0.tls, h.0.tls,           hg.0.tls, hgeom.0.tls, hharm.0.tls,           P01, P05, P10, P20, P25,           P30, P40, P50, P60, P70,           P75, P80, P90, P95, P99:           description format indicated named columns           k.tree.plot simulations ‘Value’. k.tree.plot element included simulations argument,       must include least id k columns, one field       estimate columns, one TLS metrics columns. angle.count.plot: data frame field estimates TLS       metrics angle-count plot design. row corresponds       (plot, BAF) pair, one following       columns included: Plot identification BAF: id, BAF: description format indicated           named columns angle.count.plot simulations ‘Value’. Variables estimated basis simulated field plots: N, G, V, d, dg,           dgeom, dharm, h, hg, hgeom,           hharm, d.0, dg.0, dgeom.0,           dharm.0, h.0, hg.0, hgeom.0,           hharm.0: description format indicated           named columns angle.count.plot simulations ‘Value’. TLS metrics derived simulated TLS plots: N.tls, N.pam, num.points,           num.points.est, num.points.hom, num.points.hom.est, G.tls, G.pam, V.tls,           V.pam, d.tls, dg.tls, dgeom.tls,           dharm.tls, h.tls, hg.tls, hgeom.tls,           hharm.tls, d.0.tls, dg.0.tls,           dgeom.0.tls, dharm.0.tls, h.0.tls, hg.0.tls, hgeom.0.tls, hharm.0.tls, P01,           P05, P10, P20, P25, P30,           P40, P50, P60, P70, P75,           P80, P90, P95, P99: description           format indicated named columns angle.count.plot           simulations ‘Value’. angle.count.plot element included simulations       argument, must contain least id BAF columns, one       field estimates columns one TLS metrics columns.  variables Optional character vector naming field estimates correlations   available TLS metrics computed.   argument specified user, must include least one   following character strings: “N”, “G”,   “V”, “d”, “dg”,   “dgeom”, “dharm”, “d.0”,   “dg.0”, “dgeom.0”, “dharm.0”,   “h”, “hg”, “hgeom”,   “hharm”, “h.0”, “hg.0”,   “hgeom.0”, “hharm.0”. argument   specified user, set c(\"N\", \"G\", \"V\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\") default.   cases elements simulations argument   must include least columns corresponding field estimates specified   variables argument. method Optional character vector naming correlation measurements used.   argument specified user, must include least one   following character strings: “pearson”   “spearman”. argument specified user,   set c(\"pearson\", \"spearman\") default. save.result Optional logical indicating wheter output files described   ‘Output Files’ section must saved dir.result .   argument specified user, set TRUE   default , consequence, output files saved. dir.result Optional character string naming absolute path existing directory   files described ‘Output Files’ section saved.   .Platform$file.sep must used path separator   dir.result. argument specified user,   save.result TRUE, set NULL default ,   consequence, current working directory R process   assigned dir.result execution.","code":""},{"path":"/reference/correlations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlation Between Field Estimations and TLS Metrics — correlations","text":"radius, k BAF value (according currently available plot designs: circular fixed area, k-tree angle-count), function computes correlations variable estimated field data specified variables argument metrics derived TLS data existing data frames included simulations argument. Two correlation measures implemented present: Pearson's correlation coefficient Spearman's rho. method, addition estimated measure, p-value test association also returned. cor.test function utils package used compute estimated correlations p-values associated tests; details measures tests association can found corresponding documentation. missing data three plots, zero standard deviation, order prevent missing correlation values (field estimation, TLS metric) pair plot design parameter (radius, k BAF). Apart estimated correlations corresponding p-values, ecah method, function also returns plot design parameter field estimates, value optimal correlation (.e. maximum absolute value available correlations) TLS metric corresponds.","code":""},{"path":"/reference/correlations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation Between Field Estimations and TLS Metrics — correlations","text":"correlations list including estimated correlations measure specified   method argument generated. include following named   elements: pearson: “pearson” included       method parameter, missing; otherwise, list include       estimated Pearson's correlations plot design specified       simulations argument. latter case, list include       following named elements: fixed.area.plot: simulations argument           element named “fixed.area.plot”, missing;           otherwise, matrix include estimated Pearson's correlations           circular fixed area plot design. row correspond           radius value, following columns included: radius: radius (m) simulated plots used               computing estimated correlations. Column(s) ‘<x>.<y>’: numeric column(s)               containing estimated Pearson's correlations               ‘<x>’, field estimate, ‘<y>’,               TLS metric. k.tree.plot: simulations argument           include element named “k.tree.plot”, missing;           otherwise, matrix include estimated Pearson's correlations           k-tree plot design. row correspond k           value, following columns included: k: number trees (trees) simulated plots               used computing estimated correlations. Column(s) ‘<x>.<y>’: description               format indicated               correlations$pearson$fixed.area.plot element. angle.count.plot: simulations argument           element named “angle.count”,  missing;           otherwise, matrix include estimated Pearson's correlations           angle-count plot design. row correspond           BAF value, following columns included: BAF: BAF (\\({m}^{2}/ha\\)) simulated plots used               computing estimated correlations. Column(s) ‘<x>.<y>’: description               format indicated               correlations$pearson$fixed.area.plot element. spearman: “spearman” included       method parameter, missing; otherwise, list include       estimated Spearman's correlations plot design specified       simulations argument. latter case, structure format       analogous indicated previous element       estimated Pearson's correlations replaced Spearman's correlations.  correlations.pval List containing p-value test association corresponding   measure specified method argument. structure format   indicated previous element estimated   correlations replaced p-values corresponding tests association. opt.correlations List containing optimal correlations, names TLS metrics   correspond, measure specified method argument.   list include following named elements: pearson: “pearson” included       method parameter, missing; otherwise, list include optimal       Pearson's correlations, names TLS metrics       correspond, plot design specified simulations       argument. latter case, include following       named elements: fixed.area.plot: simulations argument           element named “fixed.area.plot”, missing;           otherwise, data frame include optimal Pearson's correlations,           names TLS metrics correspond,           circular fixed area plot design. row correspond radius           value, following columns included: radius: radius (m) simulated plots used               computing estimated correlations. Columns ‘<x>.cor’               ‘<x>.metric’: former, numeric column(s)               including optimal Pearson's correlations               ‘<x>’, field estimate, available               TLS metrics; latter, character column(s) include names               TLS metrics correspond. k.tree.plot: simulations argument           element named “k.tree.plot”, missing;           otherwise, data frame include optimal Pearson's correlations           names TLS metrics correspond           k-tree plot design. row correspond k value,           following columns included: k: number trees (trees) simulated plots               used computing estimated correlations. Columns ‘<x>.cor’               ‘<x>.metric’: description format               indicated opt.correlations$pearson$fixed.area.plot               element. angle.count.plot: simulations argument           element named “angle.count”, missing;           otherwise, data frame include optimal Pearson's correlations,           names TLS metrics correspond           angle-count plot design. row correspond BAF           value, following columns included: BAF: BAF (\\({m}^{2}/ha\\)) simulated plots used               computing estimated correlations. Columns ‘<x>.cor’               ‘<x>.metric’: description format               indicated opt.correlations$pearson$fixed.area.plot               element. spearman: “spearman” included       method parameter, missing; otherwise, list include       optimal Spearman's correlations, names TLS metrics       correspond, plot design specified       simulations argument. latter case, structure       format analogous indicated previous element,       optimal Pearson's correlations replaced Spearman's correlations.","code":""},{"path":"/reference/correlations.html","id":"output-files","dir":"Reference","previous_headings":"","what":"Output Files","title":"Correlation Between Field Estimations and TLS Metrics — correlations","text":"execution, save.result argument TRUE, function prints files matrices data frames included correlations opt.correlations elements described ‘Value’. written without row names dir.result directory using write.csv function utils package. patterns used naming files correlations.<plot design>.<method>.csv opt.correlations.<plot design>.plot.<method>.csv correlation matrices optimal correlation data frames, respectively, <plot design> equal “fixed.area.plot”, “k.tree.plot” “angle.count.plot” according plot design, <method> equals “pearson” “spearman” according correlation measure. Furthermore, save.result argument TRUE, interactive line charts graphically representing correlations also created saved dir.result directory means saveWidget function htmlwidgets package. Generated widgets enable users consult correlation data directly plots, select/deselect different sets traces, zoom scroll, etc. pattern used naming files correlations.<x>.<plot design>.<method>.html, <plot design> <method> indicated previous described files, <x> equal elements specified variables argument.","code":""},{"path":"/reference/correlations.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Correlation Between Field Estimations and TLS Metrics — correlations","text":"function particularly useful steps related model-based model-assisted approaches, correlations measure strength relationship two variables (linear Pearson's correlation, monotonic Spearman's correlation).","code":""},{"path":"/reference/correlations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Correlation Between Field Estimations and TLS Metrics — correlations","text":"Juan Alberto Molina-Valero, María José Ginzo Villamayor, Manuel Antonio Novo Pérez, Adela Martínez-Calvo, Juan Gabriel Álvarez-González, Fernando Montes César Pérez-Cruzado.","code":""},{"path":[]},{"path":"/reference/correlations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation Between Field Estimations and TLS Metrics — correlations","text":"","code":"# \\donttest{  # Load field estimates and TLS metrics corresponding to Rioja data set  data(\"Rioja.simulations\")   # Establish directory where correlation results corresponding to the Rioja example # will be saved. For instance, current working directory  # dir.result <- getwd()   # Compute correlations between field estimates and TLS metrics corresponding # to Rioja example # Pearson's and Spearman's correlations for variables by default  # corr <- correlations(simulations = simulations, dir.result = dir.result)   # Pearson's and Spearman's correlations for variable 'N'  # corr <- correlations(simulations = simulations, variables = \"N\", #                      dir.result = dir.result)   # Only Pearson's correlations for variables by default  # corr <- correlations(simulations = simulations, method = \"pearson\", #                      dir.result = dir.result)   # Pearson's and Spearman's correlations corresponding to angle-count design for # all available variables  # corr <- correlations(simulations = simulations[\"angle.count\"], #                      variables <- c(\"N\", \"G\", \"V\", \"d\", \"dg\", \"dgeom\", \"dharm\", #                                     \"d.0\", \"dg.0\", \"dgeom.0\", \"dharm.0\", \"h\", #                                     \"hg\", \"hgeom\", \"hharm\", \"h.0\", \"hg.0\", #                                     \"hgeom.0\", \"hharm.0\"), #                      dir.result = dir.result)    # }"},{"path":"/reference/distance.sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Sampling Methods for Correcting Occlusions Effects — distance.sampling","title":"Distance Sampling Methods for Correcting Occlusions Effects — distance.sampling","text":"Calculation probability detection every tree using distance sampling methodologies (specifically point transects methods), means fitting detection functions histogram tree distribution according distance TLS. Use half normal hazard rate functions, without dbh covariate. probabilities used correcting estimation bias caused lack detection trees due occlusion.","code":""},{"path":"/reference/distance.sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Sampling Methods for Correcting Occlusions Effects — distance.sampling","text":"","code":"distance.sampling(tree.tls,                   id.plots = NULL,                   strata.attributes = NULL)"},{"path":"/reference/distance.sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance Sampling Methods for Correcting Occlusions Effects — distance.sampling","text":"tree.tls Data frame list trees detected dbh horizontal distances TLS structure format tree.detection.single.scan tree.detection.several.plots ‘Value’. id.plots Optional vector plot identification encoded character string numeric plots considered. case, tree.tls argument must include common column named ‘id’. argument specified user, set NULL default, consequence, plots considered. strata.attributes Optional data frame inluding plot radius considered strata level. must contain column named ‘stratum’ (numeric) encoding coinciding used previous functions (normalize, tree.detection.single.scan tree.detection.several.plots) identifying strata. Therefore, strata must heve included previously ‘tree.tls’. Another column named ‘plot.radius’ (numeric) required set maximum horizontal distance (m) considered fitting detection probability functions. argument specified user, set NULL default, consequence, trees included.","code":""},{"path":"/reference/distance.sampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance Sampling Methods for Correcting Occlusions Effects — distance.sampling","text":"internal functions related distance sampling methodologies fitted ds function included Distance package. Detection functions left-truncated 1 m, according Astrup et al., (2014). warning messages ds function provided fits converge another warnings occur. details point transects methods  similar sampling methodologies, well application R, see Buckland et al., (2001); Marques & Buckland, (2003); Miller & Thomas, (2015) Clark (2016). Examples distance sampling analyses, well lectures, available http://examples.distancesampling.org/ http://workshops.distancesampling.org/.","code":""},{"path":"/reference/distance.sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance Sampling Methods for Correcting Occlusions Effects — distance.sampling","text":"List containing following elements: tree Data frame detection probabilities every tree method. stratum: stratum identification (coincident strata tree.tls). strata, set single stratum encoded 1 (numeric). id: plot identification (coincident id tree.tls). tree: tree numbering (coincident tree tree.tls). P.hn: tree detection probability according half normal function. P.hn.cov: tree detection probability according half normal function dbh covariate. P.hr: tree detection probability according half rate function. P.hr.cov: tree detection probability according half rate function dbh covariate. parameters Data frame parameters estimated detection functions (see references understanding meaning). P.hn.scale: scale parameter half normal function (sigma). P.hn.cov.scale.intercept: alpha.0 parameter scale parameter half normal function dbh covariate. P.hn.cov.dbh: alpha.1 parameter scale parameter half normal function dbh covariate. P.hr.scale: scale parameter half rate function (sigma). P.hr.shape: shape parameter half rate function (b). P.hr.cov.scale.intercept: alpha.0 parameter scale parameter half normal function dbh covariate. P.hr.cov.dbh: alpha.1 parameter scale parameter half normal function dbh covariate. P.hr.cov.shape: shape parameter half rate function dbh covariate (b). AIC Data frame Akaike information criterions (AIC) every detection function fit. P.hn: AIC half normal function fit. P.hn.cov:  AIC half normal function dbh covariate fit. P.hr:  AIC half rate function fit. P.hr.cov:  AIC half rate function dbh covariate fit.","code":""},{"path":"/reference/distance.sampling.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Distance Sampling Methods for Correcting Occlusions Effects — distance.sampling","text":"Although step optional functionalities FORTLS, obtaining metrics assessing best plot designs (implemented metrics.variables, correlations, relative.bias optimize.plot.design), inclusion highly recommended, especially high rates occlusions. Note function useful assessing best possible plot design estimation.plot.size, correlations, relative.bias optimize.plot.design functions.","code":""},{"path":"/reference/distance.sampling.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distance Sampling Methods for Correcting Occlusions Effects — distance.sampling","text":"Astrup, R., Ducey, M. J., Granhus, ., Ritter, T., & von Lüpke, N. (2014). Approaches estimating stand-level volume using terrestrial laser scanning single-scan mode. Canadian Journal Forest Research, 44(6), 666-676. doi:10.1139/cjfr-2013-0535 . Buckland, S. T., Anderson, D. R., Burnham, K. P., Laake, J. L., Borchers, D. L., & Thomas, L. (2001). Introduction distance sampling: estimating abundance biological populations, Oxford, United Kindown, Oxford University Press. Clark, R. G. (2016). Statistical efficiency distance sampling. PloS one, 11(3), e0149298. doi:10.1371/journal.pone.0149298 . Marques, F. F., & Buckland, S. T. (2003). Incorporating covariates standard line transect analyses. Biometrics, 59(4), 924-935. doi:10.1111/j.0006-341X.2003.00107.x . Miller, D. L., & Thomas, L. (2015). Mixture models distance sampling detection functions. PloS one, 10(3), e0118726. doi:10.1371/journal.pone.0118726 .","code":""},{"path":"/reference/distance.sampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Distance Sampling Methods for Correcting Occlusions Effects — distance.sampling","text":"Juan Alberto Molina-Valero Adela Martínez-Calvo.","code":""},{"path":[]},{"path":"/reference/distance.sampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance Sampling Methods for Correcting Occlusions Effects — distance.sampling","text":"","code":"# \\donttest{  # Loading example data  data(Rioja.data)  tree.tls <- Rioja.data$tree.tls  # Whithout considering maximum distance  ds <- distance.sampling(tree.tls)     # }"},{"path":"/reference/estimation.plot.size.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess Consistency of Metrics for Simulated TLS Plots — estimation.plot.size","title":"Assess Consistency of Metrics for Simulated TLS Plots — estimation.plot.size","text":"Plots empirical linear charts density (N, trees/ha) basal area (G, \\({m}^{2}/ha\\)) estimates (derived simulated TLS plots) function plot size (estimation-size charts) different plot designs (circular fixed area, k-tree angle-count), continuous size increments (radius, k BAF respectively). Size increments set 0.1 m, 1 tree 0.1 \\({m}^{2}/ha\\) fixed area, k-tree angle-count plot designs, respectively. size-estimation line charts represent consistency predicting stand variables across different values radius, k BAF. Size-estimation charts can drawn individual sample plots (including plots together charts) mean values (global mean computed sample plots, group means different strata considered). Finally, different plot designs can compared specified arguments, producing one size-estimation chart per variable (N G).","code":""},{"path":"/reference/estimation.plot.size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess Consistency of Metrics for Simulated TLS Plots — estimation.plot.size","text":"","code":"estimation.plot.size(tree.tls,                      plot.parameters = data.frame(radius.max = 25,                                                   k.max = 50,                                                   BAF.max = 4),                      dbh.min = 4,                      average = FALSE, all.plot.designs = FALSE)"},{"path":"/reference/estimation.plot.size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess Consistency of Metrics for Simulated TLS Plots — estimation.plot.size","text":"tree.tls Data frame information trees detected TLS point cloud data format tree.detection.single.scan tree.detection.multi.scan ‘Value’. plot.parameters Optional data frame containing parameters circular fixed area, k-tree angle-count plot designs. parameters follows: radius.max: maximum plot radius (m) considered circular fixed area plots. radius.max specified larger farthest tree plot centre, horizontal distance farthest tree considered maximum radius. default, radius.max 25 m. k.tree.max: maximum number trees considered k-tree plots. k.tree.max specified larger maximum number trees densest plot, number trees considered maximum k.tree.max. default, k.tree.max 50. BAF.max: maximum basal area factor (\\({m}^{2}/ha\\)) considered angle-count plots. default, BAF.max 4. dbh.min Optional minimum dbh (cm) considered detecting trees. default set 4 cm. average Logical; TRUE, plot means values standard deviation estimations represented. default, set FALSE. .plot.designs Logical; TRUE, charts plot design drawn together. default, set FALSE.","code":""},{"path":"/reference/estimation.plot.size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assess Consistency of Metrics for Simulated TLS Plots — estimation.plot.size","text":"strata tree.tls argument, differentiated charts different colours. Strata must specified numeric column named stratum. .plot.designs argument works single strata, therefore additional strata tree.tls argument, considered equal. outputs function inspired Fig. 3 Brunner Gizachew (2014).","code":""},{"path":"/reference/estimation.plot.size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess Consistency of Metrics for Simulated TLS Plots — estimation.plot.size","text":"Invisible NULL","code":""},{"path":"/reference/estimation.plot.size.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Assess Consistency of Metrics for Simulated TLS Plots — estimation.plot.size","text":"Brunner, ., & Gizachew, B. (2014). Rapid detection stand density, tree positions, tree diameter 2D terrestrial laser scanner. European Journal Forest Research, 133(5), 819-831.","code":""},{"path":"/reference/estimation.plot.size.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assess Consistency of Metrics for Simulated TLS Plots — estimation.plot.size","text":"Juan Alberto Molina-Valero, María José Ginzo Villamayor, Manuel Antonio Novo Pérez, Adela Martínez-Calvo, Juan Gabriel Álvarez-González, Fernando Montes César Pérez-Cruzado.","code":""},{"path":"/reference/estimation.plot.size.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Assess Consistency of Metrics for Simulated TLS Plots — estimation.plot.size","text":"Mean values relevant plots representing homogenous strata. Note option choosing best plot design  field data available. Otherwise, using correlations, relative.bias optimize.plot.design desirable obtaining best possible plot design.","code":""},{"path":[]},{"path":"/reference/estimation.plot.size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess Consistency of Metrics for Simulated TLS Plots — estimation.plot.size","text":"","code":"# \\donttest{  # Loading dataset with trees detected from TLS single-scans  data(\"Rioja.data\")  tree.tls <- Rioja.data$tree.tls   # Without strata and plot parameters by default  estimation.plot.size(tree.tls) #> Computing simulations for plot: '1' #> Warning: For TLS plot '1', maximum 'k' was reduced to 35, since this is the number of trees in the plot. #>  (0.56 secs) #> Computing simulations for plot: '2' #> Warning: For TLS plot '2', maximum 'k' was reduced to 47, since this is the number of trees in the plot. #>  (0.66 secs) #> Computing simulations for plot: '3' #> Warning: For TLS plot '3', maximum 'k' was reduced to 44, since this is the number of trees in the plot. #>  (0.62 secs) #> Computing simulations for plot: '4' #> Warning: For TLS plot '4', maximum 'k' was reduced to 38, since this is the number of trees in the plot. #>  (0.56 secs) #> Computing simulations for plot: '5' #> Warning: For TLS plot '5', maximum 'k' was reduced to 44, since this is the number of trees in the plot. #>  (0.6 secs) #> Computing simulations for plot: '6' #> Warning: For TLS plot '6', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.56 secs) #> Computing simulations for plot: '7' #> Warning: For TLS plot '7', maximum 'k' was reduced to 33, since this is the number of trees in the plot. #>  (0.55 secs) #> Computing simulations for plot: '8' #> Warning: For TLS plot '8', maximum 'k' was reduced to 46, since this is the number of trees in the plot. #>  (0.59 secs) #> Computing simulations for plot: '9' #> Warning: For TLS plot '9', maximum 'k' was reduced to 38, since this is the number of trees in the plot. #>  (0.55 secs) #> Computing simulations for plot: '10' #> Warning: For TLS plot '10', maximum 'k' was reduced to 26, since this is the number of trees in the plot. #>  (0.52 secs) #> Computing simulations for plot: '11' #> Warning: For TLS plot '11', maximum 'k' was reduced to 31, since this is the number of trees in the plot. #>  (0.58 secs) #> Computing simulations for plot: '12' #> Warning: For TLS plot '12', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.6 secs) #> Computing simulations for plot: '13' #> Warning: For TLS plot '13', maximum 'k' was reduced to 40, since this is the number of trees in the plot. #>  (0.58 secs) #> Computing simulations for plot: '14' #> Warning: For TLS plot '14', maximum 'k' was reduced to 38, since this is the number of trees in the plot. #>  (0.64 secs) #> Computing simulations for plot: '15' #> Warning: For TLS plot '15', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.62 secs) #> Computing simulations for plot: '16' #> Warning: For TLS plot '16', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.6 secs)   estimation.plot.size(tree.tls, average = TRUE) #> Computing simulations for plot: '1' #> Warning: For TLS plot '1', maximum 'k' was reduced to 35, since this is the number of trees in the plot. #>  (0.6 secs) #> Computing simulations for plot: '2' #> Warning: For TLS plot '2', maximum 'k' was reduced to 47, since this is the number of trees in the plot. #>  (0.62 secs) #> Computing simulations for plot: '3' #> Warning: For TLS plot '3', maximum 'k' was reduced to 44, since this is the number of trees in the plot. #>  (0.61 secs) #> Computing simulations for plot: '4' #> Warning: For TLS plot '4', maximum 'k' was reduced to 38, since this is the number of trees in the plot. #>  (0.59 secs) #> Computing simulations for plot: '5' #> Warning: For TLS plot '5', maximum 'k' was reduced to 44, since this is the number of trees in the plot. #>  (0.55 secs) #> Computing simulations for plot: '6' #> Warning: For TLS plot '6', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.53 secs) #> Computing simulations for plot: '7' #> Warning: For TLS plot '7', maximum 'k' was reduced to 33, since this is the number of trees in the plot. #>  (0.52 secs) #> Computing simulations for plot: '8' #> Warning: For TLS plot '8', maximum 'k' was reduced to 46, since this is the number of trees in the plot. #>  (0.56 secs) #> Computing simulations for plot: '9' #> Warning: For TLS plot '9', maximum 'k' was reduced to 38, since this is the number of trees in the plot. #>  (0.49 secs) #> Computing simulations for plot: '10' #> Warning: For TLS plot '10', maximum 'k' was reduced to 26, since this is the number of trees in the plot. #>  (0.47 secs) #> Computing simulations for plot: '11' #> Warning: For TLS plot '11', maximum 'k' was reduced to 31, since this is the number of trees in the plot. #>  (0.55 secs) #> Computing simulations for plot: '12' #> Warning: For TLS plot '12', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.59 secs) #> Computing simulations for plot: '13' #> Warning: For TLS plot '13', maximum 'k' was reduced to 40, since this is the number of trees in the plot. #>  (0.58 secs) #> Computing simulations for plot: '14' #> Warning: For TLS plot '14', maximum 'k' was reduced to 38, since this is the number of trees in the plot. #>  (0.59 secs) #> Computing simulations for plot: '15' #> Warning: For TLS plot '15', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.58 secs) #> Computing simulations for plot: '16' #> Warning: For TLS plot '16', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.55 secs)   estimation.plot.size(tree.tls, all.plot.designs = TRUE) #> Computing simulations for plot: '1' #> Warning: For TLS plot '1', maximum 'k' was reduced to 35, since this is the number of trees in the plot. #>  (0.59 secs) #> Computing simulations for plot: '2' #> Warning: For TLS plot '2', maximum 'k' was reduced to 47, since this is the number of trees in the plot. #>  (0.56 secs) #> Computing simulations for plot: '3' #> Warning: For TLS plot '3', maximum 'k' was reduced to 44, since this is the number of trees in the plot. #>  (0.55 secs) #> Computing simulations for plot: '4' #> Warning: For TLS plot '4', maximum 'k' was reduced to 38, since this is the number of trees in the plot. #>  (0.55 secs) #> Computing simulations for plot: '5' #> Warning: For TLS plot '5', maximum 'k' was reduced to 44, since this is the number of trees in the plot. #>  (0.56 secs) #> Computing simulations for plot: '6' #> Warning: For TLS plot '6', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.64 secs) #> Computing simulations for plot: '7' #> Warning: For TLS plot '7', maximum 'k' was reduced to 33, since this is the number of trees in the plot. #>  (0.6 secs) #> Computing simulations for plot: '8' #> Warning: For TLS plot '8', maximum 'k' was reduced to 46, since this is the number of trees in the plot. #>  (0.54 secs) #> Computing simulations for plot: '9' #> Warning: For TLS plot '9', maximum 'k' was reduced to 38, since this is the number of trees in the plot. #>  (0.5 secs) #> Computing simulations for plot: '10' #> Warning: For TLS plot '10', maximum 'k' was reduced to 26, since this is the number of trees in the plot. #>  (0.46 secs) #> Computing simulations for plot: '11' #> Warning: For TLS plot '11', maximum 'k' was reduced to 31, since this is the number of trees in the plot. #>  (0.68 secs) #> Computing simulations for plot: '12' #> Warning: For TLS plot '12', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.56 secs) #> Computing simulations for plot: '13' #> Warning: For TLS plot '13', maximum 'k' was reduced to 40, since this is the number of trees in the plot. #>  (0.61 secs) #> Computing simulations for plot: '14' #> Warning: For TLS plot '14', maximum 'k' was reduced to 38, since this is the number of trees in the plot. #>  (0.55 secs) #> Computing simulations for plot: '15' #> Warning: For TLS plot '15', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.62 secs) #> Computing simulations for plot: '16' #> Warning: For TLS plot '16', maximum 'k' was reduced to 36, since this is the number of trees in the plot. #>  (0.68 secs)      # }"},{"path":"/reference/fixed_area_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dominant diameters and heights for simulations for angle-count plots. — fixed_area_cpp","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — fixed_area_cpp","text":"Calculate dominant diameters heights simulations angle-count plots.","code":""},{"path":"/reference/fixed_area_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — fixed_area_cpp","text":"","code":"fixed_area_cpp(radius_seq, hdist, d, h, num)"},{"path":"/reference/fixed_area_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — fixed_area_cpp","text":"radius_seq BAF sequence simulations hdist BAF masimum simulations d vector diameters opf trees h vector heights trees num number trees considered calculating diameter dominant height","code":""},{"path":"/reference/fixed_area_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — fixed_area_cpp","text":"Data frame.","code":""},{"path":"/reference/fixed_area_cpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — fixed_area_cpp","text":"Juan Alberto Molina-Valero,   María José Ginzo Villamayor,   Manuel Antonio Novo Pérez,   Adela Martínez-Calvo,   Juan Gabriel Álvarez-González,   Fernando Montes   César Pérez-Cruzado.","code":""},{"path":"/reference/height_perc_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dominant diameters and heights for simulations for angle-count plots. — height_perc_cpp","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — height_perc_cpp","text":"Calculate dominant diameters heights simulations angle-count plots.","code":""},{"path":"/reference/height_perc_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — height_perc_cpp","text":"","code":"height_perc_cpp(rho_seq, z, rho)"},{"path":"/reference/height_perc_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — height_perc_cpp","text":"rho_seq BAF sequence simulations z vector heights trees rho number trees considered calculating diameter dominant height","code":""},{"path":"/reference/height_perc_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — height_perc_cpp","text":"Data frame.","code":""},{"path":"/reference/height_perc_cpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — height_perc_cpp","text":"Juan Alberto Molina-Valero,   María José Ginzo Villamayor,   Manuel Antonio Novo Pérez,   Adela Martínez-Calvo,   Juan Gabriel Álvarez-González,   Fernando Montes   César Pérez-Cruzado.","code":""},{"path":"/reference/k_tree_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dominant diameters and heights for simulations for angle-count plots. — k_tree_cpp","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — k_tree_cpp","text":"Calculate dominant diameters heights simulations angle-count plots.","code":""},{"path":"/reference/k_tree_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — k_tree_cpp","text":"","code":"k_tree_cpp(k_seq, radius_seq, k, d, h, num)"},{"path":"/reference/k_tree_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — k_tree_cpp","text":"k_seq BAF sequence simulations radius_seq BAF sequence simulations k BAF masimum simulations d vector diameters opf trees h vector heights trees num number trees considered calculating diameter dominant height","code":""},{"path":"/reference/k_tree_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — k_tree_cpp","text":"Data frame.","code":""},{"path":"/reference/k_tree_cpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — k_tree_cpp","text":"Juan Alberto Molina-Valero,   María José Ginzo Villamayor,   Manuel Antonio Novo Pérez,   Adela Martínez-Calvo,   Juan Gabriel Álvarez-González,   Fernando Montes   César Pérez-Cruzado.","code":""},{"path":"/reference/metrics.variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Metrics and Variables for Terrestrial-Based Technologies Point Clouds — metrics.variables","title":"Compute Metrics and Variables for Terrestrial-Based Technologies Point Clouds — metrics.variables","text":"function computes set metrics variables Terrestrial-Based Technologies point cloud data, high potential related used direct estimates (case variables) forest attributes plot level. can obtained different plot designs (circular fixed area, k-tree angle-count plots). function also includes methodologies correcting occlusions generated TLS single-scan point clouds.","code":""},{"path":"/reference/metrics.variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Metrics and Variables for Terrestrial-Based Technologies Point Clouds — metrics.variables","text":"","code":"metrics.variables(tree.tls, tree.ds = NULL, tree.field = NULL,                   plot.design = c(\"fixed.area\", \"k.tree\", \"angle.count\"),                   plot.parameters = data.frame(radius = 25, k = 50, BAF = 4),                   scan.approach = \"single\", var.metr = NULL,                   dbh.min = 4, h.min = 1.3,                   max.dist = Inf, dir.data = NULL,                   save.result = TRUE, dir.result = NULL)"},{"path":"/reference/metrics.variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Metrics and Variables for Terrestrial-Based Technologies Point Clouds — metrics.variables","text":"tree.tls Data frame information trees detected terrestrial-based technologies point clouds data format tree.detection.single.scan tree.detection.multi.scan ‘Values’. tree.ds Optional list containing detection probabilities trees distance sampling methods. format must ‘Value’ obtained distance.sampling. argument specified user, set NULL default , consequence, TLS metrics using distance sampling based correction calculated circular fixed area k-tree plot designs. tree.field Data frame information trees measured field plots.   row must correspond (plot, tree) pair, must include least   following columns: id: plot identification encoded character string       numeric. Plot identifications must coincide       included id column tree.tls argument. tree: trees numbering. h.dist: horizontal distance (m) plot       centre tree centre. Centres field plots must coincide       centres corresponding Terrestrial-based technologies plots. dbh: tree diameter (cm) breast height (1.3 m). h: tree total height (m). h.blc: height based live crown (m) (optional). h.bdc: height based dead crown (m) (optional). v.user: tree volume (m^3) (optional). w.user: tree biomass (Mg) (optional). dead: integer value indicating tree dead       (1) (NA).  plot.design Vector containing plot designs considered. default, plot designs considered (circular fixed area, k-tree angle-count plots). plot.parameters Data frame containing parameters circular fixed area, k-tree angle-count plot designs. stratum column tree.list.tls argument, must number rows strata values must named using strata encoding. plot parameters specified, corresponding plot designs considered function. parameter specified, function stop giving error message! parameters follows: radius: plot radius (m) considered circular fixed area plots. Absence argument rules plot design. k.tree: number trees (trees) considered k-tree plots. Absence argument rules plot design. BAF: basal area factor (\\({m}^{2}/ha\\)) considered angle-count plots. Absence argument rules plot design. num.trees: number dominant trees per ha (tree/ha), .e. largest dbh, considered calculating dominant diameters heights. absence argument, number assumed 100 trees/ha. scan.approach Character parameter indicating TLS single-scan (‘single’) TLS multi-scan approach SLAM point clouds (‘multi’) approaches. argument specified user, set ‘multi’ approach. var.metr Optional vector containing metrics variables interest. default set NULL thus, metrics variables available generated. dbh.min Optional minimum dbh (cm) considered detecting trees. default set 4 cm. h.min Optional minimum h (m) considered detecting trees. default set 1.3 m. max.dist Optional argument specify maximum horizontal distance considered trees included. dir.data Optional character string naming absolute path directory TXT   files containing TLS point clouds located. .Platform$file.sep must   used path separator dir.data, TXT files   directory must description format indicated TXT   files normalize ‘Output Files’.   argument specified user, set NULL default   , consequence, current working directory R process   assigned dir.dat execution. save.result Optional logical indicates whether output files described ‘Output Files’ section must saved dir.result. argument specified user, set TRUE default , consequence, output files saved. dir.result Optional character string naming absolute path existing directory files described ‘Output Files’ section saved. .Platform$file.sep must used path separator dir.result. argument specified user, save.result TRUE, set NULL default , consequence, current working directory R process assigned dir.result execution.","code":""},{"path":"/reference/metrics.variables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Metrics and Variables for Terrestrial-Based Technologies Point Clouds — metrics.variables","text":"function also works several plots. case, column named \"id\" identify plots (string character numeric) must included tree.list.tls database argument. must coincide corresponding \"id\" assigned normalize TXT files saved dir.data (details see normalize). addition, several strata, can processed separately according plot.parameters values (row represent one stratum). tree.list.tls include specific \"stratum\" column, assumed one stratum, encoded according rownames(plot.parameters)[1]. Using TLS data, function computes metrics estimations variables (see ‘Value’) plot design specified plot.parameters argument. notation used variables based IUFRO (1959). stage, three plot designs available: Circular fixed area plots, simulated radius value     specified plot.parameters argument. k-tree plots, simulated k.tree value     specified plot.parameters argument. Angle-count plots, simulated BAF value     specified plot.parameters argument. Volume estimated modelling stem profile paraboloid calculating volumes revolution; trees dbh estimated tree.detection.single.scan tree.detection.multi.scan, total heights estimated percentile 99 z coordinate points delimited Voronoi polygons. Regarding occlusion corrections estimating variables, apart distance sampling methods considered distance.sampling, another occlusion corection based correcting shadowing effect (Seidel & Ammer, 2014) included estimate variables circular fixed area k-tree plots. case angle-count plots, occlusion corrections based gap probability attenuation distance TLS depending Poisson model (Strahler et al., 2008; Lovell et al., 2011).","code":""},{"path":"/reference/metrics.variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Metrics and Variables for Terrestrial-Based Technologies Point Clouds — metrics.variables","text":"List including TLS-based metrics variables computed plot designs considered. list contain one element per plot design considered (fixed.area.plot, k.tree.plot angle.count.plot): fixed.area.plot value plot.radius specified plot.parameters argument, NULL; otherwise, data frame include TLS metrics variables estimated circular fixed area plot design (rows represent simulations). data frame following columns: Stratum, plot identification radius: stratum: stratum identification encoded character string       numeric. must coincide included stratum column tree.list.tls. id: plot identification encoded character string       numeric. coincide included id       column tree.list.tls , applicable,       distance.sampling argument. radius: radius (m) simulated plot. Terrestrial-Based Technologies variables:  N.tls: stand density (trees/ha) without occlusion       corrections. N.hn, N.hr, N.hn.cov, N.hr.cov: stand       density (trees/ha) occlusion corrections based distance sampling       methodologies (see distance.sampling). columns appear distance.sampling       argument NULL. N.sh: stand density (trees/ha) correction       shadowing effect.       respectively). G.tls: stand basal area (\\({m}^{2}/ha\\)) without occlusion       corrections. G.hn, G.hr, G.hn.cov, G.hr.cov: stand       basal area (\\({m}^{2}/ha\\)) occlusion corrections based distance sampling       methodologies (see distance.sampling). columns missing distance.sampling       argument NULL. G.sh: stand basal area (\\({m}^{2}/ha\\)) correction       shadowing effect. V.tls: stand volume (\\({m}^{3}/ha\\)) without occlusion corrections. V.hn, V.hr, V.hn.cov, V.hr.cov: stand       volume (\\({m}^{3}/ha\\)) occlusion corrections based distance sampling       methodologies (see distance.sampling).  columns missing distance.sampling       argument NULL. V.sh: stand volume (\\({m}^{3}/ha\\)) correction       shadowing effect. d.tls, dg.tls, dgeom.tls, dharm.tls:       mean tree diameters (cm) breast height (1.3 m), calculated arithmetic mean,       quadratic mean, geometric mean harmonic mean, respectively. h.tls, hg.tls, hgeom.tls, hharm.tls:       mean tree heights (m), calculated arithmetic mean, quadratic mean, geometric       mean harmonic mean, respectively. d.0.tls, dg.0.tls, dgeom.0.tls,       dharm.0.tls: dominant mean tree diameters (cm) breast height       (1.3 m), calculated arithmetic mean, quadratic mean, geometric mean       harmonic mean, respectively. h.0.tls, hg.0.tls, hgeom.0.tls,       hharm.0.tls: dominant mean tree heights (m), calculated arithmetic       mean, quadratic mean, geometric mean harmonic mean, respectively. Terrestrial-Based Technologies metrics:  n.pts, n.pts.est, n.pts.red, n.pts.red.est: number points estimated number       points (points) belonging trees normal sections (+/- 5 cm)       original point cloud (n.pts n.pts.est,       respectively); number points estimated number points       (points) belonging trees normal sections (+/- 5 cm) reduced       point cloud (n.pts.red n.pts.red.est,       respectively). P01, P05, P10, P20, P25,       P30, P40, P50, P60, P70, P75,       P80, P90, P95, P99: height percentiles       derived z coordinates TLS point clouds relative ground level (m). mean.arit.z/rho/phi, mean.qua.z/rho/phi, mean.geom.z/rho/phi, mean.harm.z/rho/phi, median.z/rho/phi, mode.z/rho/phi: central tendency statistics z, rho (horizontal distance) r (euclidean distance) coordinates (arithmetic, quadratic, geometrical harmonic means, median mode, respectively). var.z/rho/phi, sd.z/rho/phi, CV.z/rho/phi, D.z/rho/phi, ID.z/rho/phi, max.z/rho/phi, min.z/rho/phi: dispersion tendency statistics z, rho r coordinates (variance, standar deviation, coefficient variation, range, interquartile range, maximum minimum, respectively). kurt.z/rho/phi, skw.z/rho/phi: curtosis skewness, respectively. L1.z/rho/phi, L2.z/rho/phi, L3.z/rho/phi, L4.z/rho/phi, L-CV.z/rho/phi, MAD-median.z/rho/phi, MAD-mode.z/rho/phi: L-moments order 2, 3 4, median absolute deviations overall median mode absolute deviations overall mode, respectively. L3.mu.z/rho/phi, L4.mu.z/rho/phi: third fourth central moments, respectively. PA.2m, PA.mean.z, PA.mode.z: percentage laser returns 2 m, mean mode, respectively. PB.2m, PB.mean.z, PB.median.z, PB.mode.z: percentage laser returns 2 m, mean mode, respectively. weibull.b.z/rho/phi, weibull.c.z/rho/phi: scale shape parameters, respectively, Weibull distribution fitted z coordinates TLS point clouds relative ground level. k.tree.plot value k.tree specified plot.parameters argument, NULL; otherwise, data frame include TLS metrics variables estimated k-tree plot design (rows represent simulations). data frame include following columns (description format indicated fixed.area.plot element): Stratum, plot identification k: stratum: stratum identification encoded character string       numeric. must coincide included stratum column tree.list.tls. id: plot identification encoded character string numeric value. coincide included id       column tree.list.tls , applicable,       distance.sampling argument. k: number trees simulated plot. Terrestrial-Based Technologies variables: N.tls, N.hn, N.hr, N.hn.cov,       N.hr.cov, N.sh, G.tls, G.hn, G.hr, G.hn.cov, G.hr.cov,       G.sh, V.tls, V.hn, V.hr, V.hn.cov,       V.hr.cov, V.sh, d.tls, dg.tls,       dgeom.tls, dharm.tls, h.tls, hg.tls,       hgeom.tls, hharm.tls, d.0.tls, dg.0.tls,       dgeom.0.tls, dharm.0.tls, h.0.tls, hg.0.tls,       hgeom.0.tls, hharm.0.tls Terrestrial-Based Technologies metrics: num.points,       num.points.est, num.points.hom, num.points.hom.est, P01,P05,       P10, P20, P25, P30, P40, P50,       P60, P70, P75, P80, P90, P95,       P99: description format indicated fixed.area.plot element. angle.count.plot value BAF specified plot.parameters argument, NULL; otherwise, data frame include TLS metrics variables estimated angle-count plot design (rows represent simulations). data frame include following columns: Stratum, plot identification BAF: stratum: stratum identification encoded character string       numeric. must coincide included stratum column tree.list.tls. id: plot identification encoded character string numeric. coincide included id column tree.list.tls. BAF: BAF (\\({m}^{2}/ha\\)) simulated plot. Terrestrial-Based Technologies variables: N.tls: description format indicated       fixed.area.plot element. N.pam: stand density (trees/ha) occlusion correction       based gap probability attenuation distance TLS.       fixed.area.plot element. G.tls: description format indicated       fixed.area.plot element. G.pam: stand basal area (\\({m}^{2}/ha\\)) occlusion correction       based gap probability attenuation distance TLS. V.tls: description format indicated       fixed.area.plot element. V.pam: stand volume (\\({m}^{3}/ha\\)) occlusion correction based       gap probability attenuation distance TLS. d.tls, dg.tls, dgeom.tls, dharm.tls, h.tls, hg.tls, hgeom.tls, hharm.tls, d.0.tls, dg.0.tls, dgeom.0.tls, dharm.0.tls, h.0.tls, hg.0.tls, hgeom.0.tls, hharm.0.tls Terrestrial-Based Technologies metrics: num.points, num.points.est, num.points.hom,       num.points.hom.est, P01, P05, P10, P20, P25, P30,       P40, P50, P60, P70, P75, P80,       P90, P95, P99: description format       indicated fixed.area.plot element.","code":""},{"path":"/reference/metrics.variables.html","id":"output-files","dir":"Reference","previous_headings":"","what":"Output Files","title":"Compute Metrics and Variables for Terrestrial-Based Technologies Point Clouds — metrics.variables","text":"computing metrics variables, save.result argument TRUE, function save elements list described ‘Value’ (fixed.area.plot, k.tree.plot angle.count.plot), different NULL CSV files.  Data frames written without row names dir.result directory using write.csv function utils package. pattern used naming files ‘metrics.variables.<plot design>.csv’, ‘<plot design>’ equal “fixed.area.plot”, “k.tree.plot” “angle.count.plot” according plot design.","code":""},{"path":"/reference/metrics.variables.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute Metrics and Variables for Terrestrial-Based Technologies Point Clouds — metrics.variables","text":"order optimize plot designs , therefore, better use metrics.variables, functions correlations, relative.bias estimation.plot.size used. function updated new metrics developed.","code":""},{"path":"/reference/metrics.variables.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Metrics and Variables for Terrestrial-Based Technologies Point Clouds — metrics.variables","text":"IUFRO (1959). Standarization symbols forest mensuration. Vienna, Austria, IUFRO. Lovell, J. L., Jupp, D. L. B., Newnham, G. J., & Culvenor, D. S. (2011). Measuring tree stem diameters using intensity profiles ground-based scanning lidar fixed viewpoint. ISPRS Journal Photogrammetry Remote Sensing, 66(1), 46-55. doi:10.1016/j.isprsjprs.2010.08.006 Seidel, D., & Ammer, C. (2014). Efficient measurements basal area short rotation forests based terrestrial laser scanning special consideration shadowing. iForest-Biogeosciences Forestry, 7(4), 227. doi:10.3832/ifor1084-007 Strahler, . H., Jupp, D. L. B., Woodcock, C. E., Schaaf, C. B., Yao, T., Zhao, F., Yang, X., Lovell, J., Culvenor, D., Newnham, G., Ni-Miester, W., & Boykin-Morris, W. (2008). Retrieval forest structural parameters using ground-based lidar instrument (Echidna®). Canadian Journal Remote Sensing, 34(sup2), S426-S440. doi:10.5589/m08-046","code":""},{"path":"/reference/metrics.variables.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Metrics and Variables for Terrestrial-Based Technologies Point Clouds — metrics.variables","text":"Juan Alberto Molina-Valero, Adela Martínez-Calvo.","code":""},{"path":[]},{"path":"/reference/metrics.variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Metrics and Variables for Terrestrial-Based Technologies Point Clouds — metrics.variables","text":"","code":"# \\donttest{  # Establishment of working directories (optional) # By default here we propose the current working directory of the R process  dir.data <- getwd() dir.result <- getwd()   # Loading example data included in FORTLS  data(\"Rioja.data\") tree.tls <- Rioja.data$tree.tls tree.tls <- tree.tls[tree.tls$id == \"1\", ]  # Download example of TXT file corresponding to plot 1 from Rioja data set  download.file(url = \"https://www.dropbox.com/s/w4fgcyezr2olj9m/Rioja_1.txt?dl=1\",               destfile = file.path(dir.data, \"1.txt\"), mode = \"wb\")   # Considering distance sampling methods (only for single-scan approaches)  ds <- distance.sampling(tree.tls) #> Warning: First partial hessian is singular; using second-partial hessian #> Warning: First partial hessian is singular; using second-partial hessian #> Warning: First partial hessian is singular; using second-partial hessian  met.var.TLS <- metrics.variables(tree.tls = tree.tls,                                  tree.ds = ds,                                  plot.parameters = data.frame(radius = 10, k = 10, BAF = 2),                                  dir.data = dir.data, dir.result = dir.result) #> Computing metrics for plot: '1' #> Warning: cannot xtfrm data frames #>  (14.28 secs)     # }"},{"path":"/reference/ncr_point_cloud_double.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dominant diameters and heights for simulations for angle-count plots. — ncr_point_cloud_double","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — ncr_point_cloud_double","text":"Calculate dominant diameters heights simulations angle-count plots.","code":""},{"path":"/reference/ncr_point_cloud_double.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — ncr_point_cloud_double","text":"","code":"ncr_point_cloud_double(m)"},{"path":"/reference/ncr_point_cloud_double.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — ncr_point_cloud_double","text":"m matrix points.","code":""},{"path":"/reference/ncr_point_cloud_double.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — ncr_point_cloud_double","text":"Data frame.","code":""},{"path":"/reference/ncr_point_cloud_double.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate dominant diameters and heights for simulations for angle-count plots. — ncr_point_cloud_double","text":"Juan Alberto Molina-Valero,   María José Ginzo Villamayor,   Manuel Antonio Novo Pérez,   Adela Martínez-Calvo,   Juan Gabriel Álvarez-González,   Fernando Montes   César Pérez-Cruzado.","code":""},{"path":"/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative Coordinates and Density Reduction for Terrestrial-Based Technologies Point Clouds — normalize","title":"Relative Coordinates and Density Reduction for Terrestrial-Based Technologies Point Clouds — normalize","text":"function obtains coordinates relative plot centre Terrestrial Laser Scanner (TLS) Simultaneous Localization Mapping (SLAM) point clouds (supplied LAS files) derived single scans (TLS scanner point plot centre). addition, point cropping process developed Molina-Valero et al., (2019) applied criterion reducing point density homogeneously space proportionally object size.","code":""},{"path":"/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Coordinates and Density Reduction for Terrestrial-Based Technologies Point Clouds — normalize","text":"","code":"normalize(las, normalized = NULL,           x.center = NULL, y.center = NULL,           max.dist = NULL, min.height = NULL, max.height = 50,           algorithm.dtm = \"knnidw\", res.dtm = 0.2,           csf = list(cloth_resolution = 0.5),           RGB = NULL,           scan.approach = \"single\",           id = NULL, file = NULL,           dir.data = NULL, save.result = TRUE, dir.result = NULL)"},{"path":"/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Coordinates and Density Reduction for Terrestrial-Based Technologies Point Clouds — normalize","text":"las Character string containing name LAS file belonging TLS point cloud, including .las extension (see ‘Examples’). Planimetric coordinates point cloud data must local, representing TLS scan point origin Cartesian coordinates x y (0, 0). normalized Optional argument establish TRUE point cloud already normalized. x.center Planimetric x center coordinate point cloud data. y.center Planimetric y center coordinate point cloud data. max.dist Optional maximum horizontal distance (m) considered plot centre. points farther max.dist discarded normalization process. argument specified user, set NULL default , consequence, points used processing, max.dist representing farthest point. min.height Optional minimum height (m) considered ground level. points min.height discarded normalization process. argument specified user, set NULL default , consequence, points used processing, min.height representing lowest point. max.height Optional maximum height (m) considered ground level. points max.height discarded normalization process. argument specified user, set NULL default , consequence, points used processing, max.height representing highest point. algorithm.dtm Algorithm used generate digital terrain model (DTM) TLS point cloud. two posible options based spatial interpolation: ‘tin’ ‘knnidw’ (see ‘Details’). argument specified user, set ‘knnidw’ algorithm. res.dtm Numeric parameter. Resolution DTM generated normalize point cloud (see ‘Details’). argument specified user, set 0.2 m. csf List containing parameters CSF algorithm: cloth_resolution: default 0.5. scan.approach Character parameter indicating TLS single-scan (‘single’) TLS multi-scan approach SLAM point clouds (‘multi’) approaches. argument specified user, set ‘multi’ approach. RGB Logical parameter useful point clouds colorized, thus including values RGB colors. based Green Leaf Algorithm (GLA) (see ‘Details’). id Optional plot identification encoded character string numeric. argument specified user, set NULL default , consequence, plot encoded 1. file Optional file name identification encoded character string numeric value. null, file encoded id default. dir.data Optional character string naming absolute path directory LAS files containing TLS point clouds located. .Platform$file.sep must used path separator dir.data. argument specified user, set NULL default , consequence, current working directory R process assigned dir.data execution. save.result Optional logical indicates whether output files described ‘Output Files’ section must saved dir.result. argument specified user, set TRUE default , consequence, output files saved. dir.result Optional character string naming absolute path existing directory files described ‘Output Files’ section saved. .Platform$file.sep must used path separator dir.result. argument specified user, save.result TRUE, set NULL default , consequence, current working directory R process assigned dir.result execution.","code":""},{"path":"/reference/normalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relative Coordinates and Density Reduction for Terrestrial-Based Technologies Point Clouds — normalize","text":"Relative coordinates obtained means normalization process, generating digital terrain model (DTM) TLS point cloud, ground height set 0 m. DTM generated spatial interpolation ground points classified CSF algorithm (Zhang et al., (2016)). Two algorithms available purpose: () spatial interpolation based Delaunay triangulation, performs linear interpolation within triangle (‘tin’); (ii) spatial interpolation using k-nearest neighbour (KNN) approach inverse-distance weighting (IDW) (‘knnidw’). Note normalization process based lidR package functions: classify_ground, grid_terrain normalize_height. point cropping process reduces point cloud density proportionally likelihood objects receive points according distance TLS size, determined angle aperture (farther , lower density ). result approximately homogeneous point cloud three-dimensional space (details see Molina-Valero et al., (2019)). Green Leaf Algorithm (GLA) calculated according Louhaichi et al., (2001)follows: points values 0 clasified woody parts, thus retained tree detection functions.","code":""},{"path":"/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relative Coordinates and Density Reduction for Terrestrial-Based Technologies Point Clouds — normalize","text":"Data frame normalized point cloud including following columns (row corresponds one point): id Plot identification encoded character string numeric argument id. file File name identification encoded character string numeric, corresponding normalized reduced point clouds saved. coincides TXT file absolute path specified dir.result (save.result set TRUE). Coordinates Cartesian (according https://en.wikipedia.org/wiki/Cartesian_coordinate_system notation): x: x axis distance (m). y: y axis distance (m). z: height (m). Cylindrical (according https://en.wikipedia.org/wiki/Cylindrical_coordinate_system notation): rho: horizontal distance (m). phi: angular coordinate (rad). z: height (m). Spherical (according https://en.wikipedia.org/wiki/Spherical_coordinate_system notation): r: radial distance (m). theta: polar angle (rad). phi: azimuthal angle (rad) slope Slope terrain (rad). GLA Green Leaf Algorithm (point cloud colorized specified arguments). prob selection probability assigned point cropping process (0-1]. farthest probability 1. prob.select final selection probability assigned point cropping process. Selected (1) discarded point (0).","code":""},{"path":"/reference/normalize.html","id":"output-files","dir":"Reference","previous_headings":"","what":"Output Files","title":"Relative Coordinates and Density Reduction for Terrestrial-Based Technologies Point Clouds — normalize","text":"end normalization process, save.result argument TRUE, function save reduced point cloud TXT file encoded according file argument. format data frame described ‘Value’, except prob column, removed points selected point cropping process final selection probability 1. data frame written without row names dir.result directory using vroom_write function vroom package.","code":""},{"path":"/reference/normalize.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Relative Coordinates and Density Reduction for Terrestrial-Based Technologies Point Clouds — normalize","text":"Note max.dist, min.height max.height arguments may useful optimizing computing time well removing unnecessary /outlier points. values may selected appropriately inventory data already available, user knowledge autoecology scanned tree species. Note also linear interpolation algorithm (‘tin’ package) showed highest accuracy Liang et al., (2018) DTM generation single-scans. work DTM resolution 0.2 m also considered adequately square plots 32 x 32 m.","code":""},{"path":"/reference/normalize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Relative Coordinates and Density Reduction for Terrestrial-Based Technologies Point Clouds — normalize","text":"Liang, X., Hyyppä, J., Kaartinen, H., Lehtomäki, M., Pyörälä, J., Pfeifer, N., ... & Wang, Y. (2018). International benchmarking terrestrial laser scanning approaches forest inventories. ISPRS journal photogrammetry remote sensing, 144, 137-179. doi:10.1016/j.isprsjprs.2018.06.021 Louhaichi, M., Borman, M. M., & Johnson, D. E. (2001). Spatially located platform aerial photography documentation grazing impacts wheat. Geocarto International, 16(1), 65-70. doi:10.1080/10106040108542184 Molina-Valero J. ., Ginzo-Villamayor M. J., Novo Pérez M. ., Álvarez-González J. G., & Pérez-Cruzado C. (2019). Estimación del área basimétrica en masas maduras de Pinus sylvestris en base una única medición del escáner laser terrestre (TLS). Cuadernos de la Sociedad Espanola de Ciencias Forestales, 45(3), 97-116. doi:10.31167/csecfv0i45.19887 . Zhang, W., Qi, J., Wan, P., Wang, H., Xie, D., Wang, X., & Yan, G. (2016). easy--use airborne LiDAR data filtering method based cloth simulation. Remote Sensing, 8(6), 501. doi:10.3390/rs8060501 .","code":""},{"path":[]},{"path":"/reference/normalize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Relative Coordinates and Density Reduction for Terrestrial-Based Technologies Point Clouds — normalize","text":"Juan Alberto Molina-Valero Adela Martínez-Calvo.","code":""},{"path":"/reference/normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative Coordinates and Density Reduction for Terrestrial-Based Technologies Point Clouds — normalize","text":"","code":"# \\donttest{  # Establishment of working directories (optional) # By default here we propose the current working directory of the R process  dir.data <- getwd() dir.result <- getwd()   # SINGLE-SCAN APPROACH  # Loading example data (LAZ file) to dir.data  download.file(\"https://www.dropbox.com/s/v9tomu358xgho25/Galicia_single_scan.laz?dl=1\",               destfile = file.path(dir.data, \"Galicia_single_scan.laz\"),               mode = \"wb\")   # Normalizing the whole point cloud data without considering arguments  pcd <- normalize(las = \"Galicia_single_scan.laz\",                   dir.data = dir.data, dir.result = dir.result) #> Inverse distance weighting: [===-----------------------------------------------] 6% (2 threads) Inverse distance weighting: [===-----------------------------------------------] 7% (2 threads) Inverse distance weighting: [====----------------------------------------------] 8% (2 threads) Inverse distance weighting: [====----------------------------------------------] 9% (2 threads) Inverse distance weighting: [=====---------------------------------------------] 10% (2 threads) Inverse distance weighting: [=====---------------------------------------------] 11% (2 threads) Inverse distance weighting: [======--------------------------------------------] 12% (2 threads) Inverse distance weighting: [======--------------------------------------------] 13% (2 threads) Inverse distance weighting: [=======-------------------------------------------] 14% (2 threads) Inverse distance weighting: [=======-------------------------------------------] 15% (2 threads) Inverse distance weighting: [========------------------------------------------] 16% (2 threads) Inverse distance weighting: [========------------------------------------------] 17% (2 threads) Inverse distance weighting: [=========-----------------------------------------] 18% (2 threads) Inverse distance weighting: [=========-----------------------------------------] 19% (2 threads) Inverse distance weighting: [==========----------------------------------------] 20% (2 threads) Inverse distance weighting: [==========----------------------------------------] 21% (2 threads) Inverse distance weighting: [===========---------------------------------------] 22% (2 threads) Inverse distance weighting: [===========---------------------------------------] 23% (2 threads) Inverse distance weighting: [============--------------------------------------] 24% (2 threads) Inverse distance weighting: [============--------------------------------------] 25% (2 threads) Inverse distance weighting: [=============-------------------------------------] 26% (2 threads) Inverse distance weighting: [=============-------------------------------------] 27% (2 threads) Inverse distance weighting: [==============------------------------------------] 28% (2 threads) Inverse distance weighting: [==============------------------------------------] 29% (2 threads) Inverse distance weighting: [===============-----------------------------------] 30% (2 threads) Inverse distance weighting: [===============-----------------------------------] 31% (2 threads) Inverse distance weighting: [================----------------------------------] 32% (2 threads) Inverse distance weighting: [================----------------------------------] 33% (2 threads) Inverse distance weighting: [=================---------------------------------] 34% (2 threads) Inverse distance weighting: [=================---------------------------------] 35% (2 threads) Inverse distance weighting: [==================--------------------------------] 36% (2 threads) Inverse distance weighting: [==================--------------------------------] 37% (2 threads) Inverse distance weighting: [===================-------------------------------] 38% (2 threads) Inverse distance weighting: [===================-------------------------------] 39% (2 threads) Inverse distance weighting: [====================------------------------------] 40% (2 threads) Inverse distance weighting: [====================------------------------------] 41% (2 threads) Inverse distance weighting: [=====================-----------------------------] 42% (2 threads) Inverse distance weighting: [=====================-----------------------------] 43% (2 threads) Inverse distance weighting: [======================----------------------------] 44% (2 threads) Inverse distance weighting: [======================----------------------------] 45% (2 threads) Inverse distance weighting: [=======================---------------------------] 46% (2 threads) Inverse distance weighting: [=======================---------------------------] 47% (2 threads) Inverse distance weighting: [========================--------------------------] 48% (2 threads) Inverse distance weighting: [========================--------------------------] 49% (2 threads) Inverse distance weighting: [=========================-------------------------] 50% (2 threads) Inverse distance weighting: [=========================-------------------------] 51% (2 threads) Inverse distance weighting: [==========================------------------------] 52% (2 threads) Inverse distance weighting: [==========================------------------------] 53% (2 threads) Inverse distance weighting: [===========================-----------------------] 54% (2 threads) Inverse distance weighting: [===========================-----------------------] 55% (2 threads) Inverse distance weighting: [============================----------------------] 56% (2 threads) Inverse distance weighting: [============================----------------------] 57% (2 threads) Inverse distance weighting: [=============================---------------------] 58% (2 threads) Inverse distance weighting: [=============================---------------------] 59% (2 threads) Inverse distance weighting: [==============================--------------------] 60% (2 threads) Inverse distance weighting: [==============================--------------------] 61% (2 threads) Inverse distance weighting: [===============================-------------------] 62% (2 threads) Inverse distance weighting: [===============================-------------------] 63% (2 threads) Inverse distance weighting: [================================------------------] 64% (2 threads) Inverse distance weighting: [================================------------------] 65% (2 threads) Inverse distance weighting: [=================================-----------------] 66% (2 threads) Inverse distance weighting: [=================================-----------------] 67% (2 threads) Inverse distance weighting: [==================================----------------] 68% (2 threads) Inverse distance weighting: [==================================----------------] 69% (2 threads) Inverse distance weighting: [===================================---------------] 70% (2 threads) Inverse distance weighting: [===================================---------------] 71% (2 threads) Inverse distance weighting: [====================================--------------] 72% (2 threads) Inverse distance weighting: [====================================--------------] 73% (2 threads) Inverse distance weighting: [=====================================-------------] 74% (2 threads) Inverse distance weighting: [=====================================-------------] 75% (2 threads) Inverse distance weighting: [======================================------------] 76% (2 threads) Inverse distance weighting: [======================================------------] 77% (2 threads) Inverse distance weighting: [=======================================-----------] 78% (2 threads) Inverse distance weighting: [=======================================-----------] 79% (2 threads) Inverse distance weighting: [========================================----------] 80% (2 threads) Inverse distance weighting: [========================================----------] 81% (2 threads) Inverse distance weighting: [=========================================---------] 82% (2 threads) Inverse distance weighting: [=========================================---------] 83% (2 threads) Inverse distance weighting: [==========================================--------] 84% (2 threads) Inverse distance weighting: [==========================================--------] 85% (2 threads) Inverse distance weighting: [===========================================-------] 86% (2 threads) Inverse distance weighting: [===========================================-------] 87% (2 threads) Inverse distance weighting: [============================================------] 88% (2 threads) Inverse distance weighting: [============================================------] 89% (2 threads) Inverse distance weighting: [=============================================-----] 90% (2 threads) Inverse distance weighting: [=============================================-----] 91% (2 threads) Inverse distance weighting: [==============================================----] 92% (2 threads) Inverse distance weighting: [==============================================----] 93% (2 threads) Inverse distance weighting: [===============================================---] 94% (2 threads) Inverse distance weighting: [===============================================---] 95% (2 threads) Inverse distance weighting: [================================================--] 96% (2 threads) Inverse distance weighting: [================================================--] 97% (2 threads) Inverse distance weighting: [=================================================-] 98% (2 threads) Inverse distance weighting: [=================================================-] 99% (2 threads) Inverse distance weighting: [==================================================] 100% (2 threads)    # MULTI-SCAN APPROACH  # Loading example data (LAZ file) to dir.data  download.file(\"https://www.dropbox.com/s/j48chrbngwoma6y/Galicia_multi_scan.laz?dl=1\",               destfile = file.path(dir.data, \"Galicia_multi_scan.laz\"),               mode = \"wb\")  # Normalizing the whole point cloud data without considering arguments  pcd <- normalize(las = \"Galicia_multi_scan.laz\",                   scan.approach = \"multi\",                   dir.data = dir.data, dir.result = dir.result)    # }"},{"path":"/reference/optimize.plot.design.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize Plot Design Based on Optimal Correlations — optimize.plot.design","title":"Optimize Plot Design Based on Optimal Correlations — optimize.plot.design","text":"Generation interactive heatmaps graphically represent optimal correlations variables estimated field data, metrics derived TLS data. data must derived three different plot designs currently available (circular fixed area, k-tree angle-count) correspond plots incremental values plot design parameter (radius, k BAF, respectively). addition, correlation measures currently admissible Pearson's correlation coefficient /Spearman's rho.","code":""},{"path":"/reference/optimize.plot.design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize Plot Design Based on Optimal Correlations — optimize.plot.design","text":"","code":"optimize.plot.design(correlations,                      variables = c(\"N\", \"G\", \"V\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\"),                      dir.result = NULL)"},{"path":"/reference/optimize.plot.design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize Plot Design Based on Optimal Correlations — optimize.plot.design","text":"correlations List including optimal correlations field estimations TLS   metrics. structure format must analogous   opt.correlations element output returned   correlations function. particular, list must include least one   following named elements: pearson: list containing optimal Pearson's correlations,       names TLS metrics correspond. must include       least one following named elements: fixed.area.plot: data frame containing optimal           Pearson's correlations, names TLS metrics           correspond, circular fixed area plot design. row           correspond radius value, data frame include following columns: radius: radius (m) simulated plots used               computing estimated correlations. Columns ‘<x>.cor’               ‘<x>.metric’: former, numeric column(s)               containing optimal Pearson's correlations               ‘<x>’, field estimate, available TLS               metrics correlations function executed;               latter, character column(s) containing names TLS               metrics correspond. fixed.area.plot included pearson element,           must contain least radius column           (‘<x>.cor’, ‘<x>.metric’) pair           columns corresponding field estimation. k.tree.plot: data frame including optimal Pearson's           correlations names TLS metrics           correspond, k-tree plot design. row           correspond k value, following columns included: k: number trees (trees) simulated plots               used computing estimated correlations. Columns ‘<x>.cor’               ‘<x>.metric’: description format               indicated correlations$pearson$fixed.area.plot element. k.tree.plot included pearson element, must           contain least k column, (‘<x>.cor’,           ‘<x>.metric’) pair columns corresponding           field estimation. angle.count.plot: data frame including optimal           Pearson's correlations names TLS metrics           correspond, angle-count plot design. row           correspond BAF value, data frame include following columns: BAF: BAF (\\({m}^{2}/ha\\)) simulated plots used               compute estimated correlations. Columns ‘<x>.cor’               ‘<x>.metric’: description format               indicated correlations$pearson$fixed.area.plot element. angle.count.plot included pearson element,           must include least BAF column           (‘<x>.cor’, ‘<x>.metric’) pair columns           corresponding field estimation. spearman: list containing optimal Spearman's       correlations, names TLS metrics correspond.       structure format analogous indicated       previous element optimal Pearson's correlations replaced       Spearman's correlations.  variables Optional character vector naming field estimations whose optimal correlations   represented graphically heatmaps generated   execution. argument specified user, must include   least one following character strings: “N”,   “G”, “V”, “d”, “dg”,   “dgeom”, “dharm”, “d.0”,   “dg.0”, “dgeom.0”, “dharm.0”,   “h”, “hg”, “hgeom”,   “hharm”, “h.0”, “hg.0”,   “hgeom.0”, “hharm.0”. argument   specified user, set   c(\"N\", \"G\", \"V\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\") default.   cases, data frames correlations   argument must least (‘<x>.cor’,   ‘<x>.metric’) pairs corresponding field estimations   specified variables argument. dir.result Optional character string naming absolute path existing directory   files described ‘Output Files’ section saved.   .Platform$file.sep must used path separator   dir.result. argument specified user, set   NULL default , consequence, current working directory   R process assigned dir.result execution.","code":""},{"path":"/reference/optimize.plot.design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimize Plot Design Based on Optimal Correlations — optimize.plot.design","text":"function represents graphically, means interactive heatmaps, strongest correlations (positive negative) plot design size simulated, estimated variables based field data specified variables argument, metrics derived TLS data, circular fixed area, k-tree /angle-count plot designs. Two correlation measures implemented present: Pearson’s correlation coefficient Spearman’s rho. Hence, optimal correlations based correlations arguments taken account execution. correlation measure plot design, least one missing value optimal correlations must represented; otherwise, execution stopped, error message appear. addition, least two different missing values optimal correlations required ensure colour palette correctly applied heatmap generated.","code":""},{"path":"/reference/optimize.plot.design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize Plot Design Based on Optimal Correlations — optimize.plot.design","text":"Invisible NULL.","code":""},{"path":"/reference/optimize.plot.design.html","id":"output-files","dir":"Reference","previous_headings":"","what":"Output Files","title":"Optimize Plot Design Based on Optimal Correlations — optimize.plot.design","text":"execution, interactive heatmaps graphically representing optimal correlations values field estimations TLS metrics created saved dir.result directory means saveWidget function htmlwidgets package. widgets generated allow users consult optimal correlations values TLS metrics correspond directly plots, zoom scroll, . pattern used naming files opt.correlations.<plot design>.<method>.html, <plot design> equals “fixed.area.plot”, “k.tree.plot” “angle.count.plot” according plot design, <method> equals “pearson” “spearman” according correlation measure.","code":""},{"path":"/reference/optimize.plot.design.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Optimize Plot Design Based on Optimal Correlations — optimize.plot.design","text":"function key choosing best possible plot design (terms correlation measures) considering variables interest establishing definitive sampling design.","code":""},{"path":"/reference/optimize.plot.design.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Optimize Plot Design Based on Optimal Correlations — optimize.plot.design","text":"Juan Alberto Molina-Valero, María José Ginzo Villamayor, Manuel Antonio Novo Pérez, Adela Martínez-Calvo, Juan Gabriel Álvarez-González, Fernando Montes César Pérez-Cruzado.","code":""},{"path":[]},{"path":"/reference/optimize.plot.design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize Plot Design Based on Optimal Correlations — optimize.plot.design","text":"","code":"# \\donttest{  # Load field estimations and TLS metrics corresponding to Rioja data set  data(\"Rioja.simulations\")   # Compute correlations between field estimations and TLS metrics corresponding # to Rioja example, and select optimal correlations results  corr <- correlations(simulations = simulations,                      variables = c(\"N\", \"G\", \"d\", \"dg\", \"dgeom\",\"dharm\",                                    \"d.0\", \"dg.0\", \"dgeom.0\", \"dharm.0\", \"h\",                                    \"hg\", \"hgeom\", \"hharm\", \"h.0\", \"hg.0\",                                    \"hgeom.0\", \"hharm.0\"),                      save.result = FALSE) #> Computing correlations for fixed area plots #>  (363.27 secs) #> Computing correlations for k-tree plots #>  (88.57 secs) #> Computing correlations for angle-count plots #>  (65.45 secs)  opt.corr <- corr$opt.correlations   # Establish directory where optimal correlations heatmaps corresponding to Rioja # example will be saved. For instance, current working directory  dir.result <- getwd()   # Generate heatmaps for optimal correlations between field estimations and TLS # metrics corresponding to Rioja example # Optimal Pearson's and Spearman's correlations for variables by default  # optimize.plot.design(correlations = opt.corr, dir.result = dir.result)   # Optimal Pearson's and Spearman's correlations for variables 'N' and 'G'  optimize.plot.design(correlations = opt.corr, variables = c(\"N\", \"G\"),                      dir.result = dir.result) #> Plotting heatmap(s) for optimal Pearson's correlations  #>  (4.04 secs) #> Plotting heatmap(s) for optimal Spearman's correlations  #>  (3.79 secs)     # }"},{"path":"/reference/relative.bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative Bias Between Field Estimations and TLS metrics — relative.bias","title":"Relative Bias Between Field Estimations and TLS metrics — relative.bias","text":"Computes relative bias variables estimated field data TLS counterparts derived TLS data. Field estimates TLS metrics common set plots required order compute relative bias. data must come three different plot designs currently available (circular fixed area, k-tree angle-count) correspond plots incremental values plot design parameter (radius, k BAF, respectively). addition computing relative bias, interactive line charts graphically representing values obtained field estimate related TLS metrics also generated.","code":""},{"path":"/reference/relative.bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Bias Between Field Estimations and TLS metrics — relative.bias","text":"","code":"relative.bias(simulations,               variables = c(\"N\", \"G\", \"V\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\"),               save.result = TRUE, dir.result = NULL)"},{"path":"/reference/relative.bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Bias Between Field Estimations and TLS metrics — relative.bias","text":"simulations List containing variables estimated field data metrics   derived TLS data. structure format must analogous output   returned simulations function. particular, teh list must include   least one following named elements: fixed.area.plot: description format indicated       named element simulations argument       correlations function. difference       columns required included argument: adittion id,       radius least one field estimate columns, must       include least one TLS counterpart field estimate condidered. k.tree.plot: description format indicated       named element simulations argument       correlations function. difference columns required included argument: adittion id, k       least one field estimate columns, must include       least one TLS counterpart field estimate considered. angle.count.plot: description format indicated       named element simulations argument       correlations function. difference columns required element included argument: adittion id,       BAF least one field estimate columns, must       contain least one TLS counterpart field estimate considered.  variables Optional character vector naming field estimates relative bias   available TLS counterparts computed.   argument specified user, must contain least one   following character strings: “N”, “G”,   “V”, “d”, “dg”,   “dgeom”, “dharm”, “d.0”,   “dg.0”, “dgeom.0”, “dharm.0”,   “h”, “hg”, “hgeom”,   “hharm”, “h.0”, “hg.0”,    “hgeom.0”, “hharm.0”. argument   specified user, set   c(\"N\", \"G\", \"V\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\") default.   cases, elements simulations argument   must include least columns corresponding field estimations specified   variables argument. save.result Optional logical indicates whether output files described   ‘Output Files’ section must saved dir.result.   argument specified user, set TRUE   default , consequence, output files saved. dir.result Optional character string naming absolute path existing directory   files described ‘Output Files’ section saved.   .Platform$file.sep must used path separator   dir.result. argument specified user,   save.result TRUE, set NULL default ,   consequence, current working directory R process   assigned dir.result execution.","code":""},{"path":"/reference/relative.bias.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relative Bias Between Field Estimations and TLS metrics — relative.bias","text":"radius, k BAF value (according currently available plot designs: circular fixed area, k-tree angle-count), function computes relative bias variable estimated field data, specified variables argument, counterparts derived TLS data, existing data frames included simulations argument. TLS metrics considered counterparts field estimate detailed (see simulations ‘Value’ function details used notation): TLS counterparts N N.tls, N.hn,     N.hr, N.hn.cov, N.hr.cov N.sh fixed     area k-tree plot designs; N.tls N.pam     angle-count plot design. TLS counterparts G G.tls, G.hn,     G.hr, G.hn.cov, G.hr.cov G.sh fixed     area k-tree plot designs; G.tls G.pam     angle-count plot design. TLS counterparts V V.tls, V.hn,     V.hr, V.hn.cov, V.hr.cov V.sh fixed     area k-tree plot designs; V.tls V.pam     angle-count plot design. TLS counterparts d, dg, dgeom, dharm,     d.0, dg.0, dgeom.0, dharm.0 ,     respectively: d.tls, dg.tls, dgeom.tls,     dharm.tls, d.0.tls, dg.0.tls, dgeom.0.tls,      dharm.0.tls three available plot designs. TLS counterparts h, hg, hgeom, hharm,     h.0, hg.0, hgeom.0, hharm.0 ,     respectively h.tls, hg.tls, hgeom.tls,     hharm.tls, h.0.tls, hg.0.tls, hgeom.0.tls,     hharm.0.tls three available plot designs. adittion, P99 also taken account counterpart     field estimates. relative bias field estimation TLS counterparts estimated follows $$\\frac{\\frac{1}{n}\\sum_{= 1}^{n}{y_{}} - \\frac{1}{n}\\sum_{= 1}^{n}{x_{}}}{\\frac{1}{n}\\sum_{= 1}^{n}{x_{}}} * 100$$ \\(x_{}\\) \\(y_{}\\)  values field estimate TLS counterpart, respectively, corresponding plot \\(\\) \\(= 1, \\ldots, n\\).","code":""},{"path":"/reference/relative.bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relative Bias Between Field Estimations and TLS metrics — relative.bias","text":"fixed.area.plot “fixed.area.plot” element exists simulations   argument, missing; otherwise, matrix include estimates relative bias   circular fixed area plot design field estimation specified   variables argument TLS counterpart(s) existing   “fixed.area.plot” element simulations argument.   row correspond radius value, following columns included: radius: radius (m) simulated plots used computing       estimated relative bias. Column(s) ‘<x>.<y>’: numeric column(s) containing       estimated relative bias ‘<x>’, field estimation,       ‘<y>’, TLS counterpart.  k.tree.plot “k.tree.plot” element exists simulations   argument, missing; otherwise, matrix include relative bias estimated   k-tree plot design field estimation specified   variables argument TLS counterpart(s) existing   “k.tree.plot” element simulations argument. row correspond k value, following columns included: k: number trees (trees) simulated plots used       computing estimated relative bias. Column(s) ‘<x>.<y>’: numeric column(s) containing       estimated relative bias ‘<x>’, field estimation,       ‘<y>’, TLS counterpart.  angle.count.plot “angle.count” element exists simulations   argument, missing; otherwise, matrix contain estimated relative bias   angle-count plot design field estimation specified   variables argument TLS counterpart(s) existing   “angle.count.plot” element simulations argument.   row correspond BAF value, following   columns included: BAF: BAF (\\({m}^{2}/ha\\)) simulated plots used computing       estimated relative bias. Column(s) ‘<x>.<y>’: numeric column(s) containing       estimated relative bias ‘<x>’, field estimation,       ‘<y>’, TLS counterpart.","code":""},{"path":"/reference/relative.bias.html","id":"output-files","dir":"Reference","previous_headings":"","what":"Output Files","title":"Relative Bias Between Field Estimations and TLS metrics — relative.bias","text":"execution, save.result argument TRUE, function print matrices described ‘Value’ section files. written without row names dir.result directory using write.csv function utils package. pattern used naming files RB.<plot design>.csv, <plot design> equal “fixed.area.plot”, “k.tree.plot” “angle.count.plot” according plot design. Furthermore, save.result argument TRUE, interactive line charts graphically representing relative bias values also created saved dir.result directory means saveWidget function htmlwidgets package. Generated widgets allow users consult relative bias data directly plots, select/deselect different sets traces, zoom scroll, . pattern used naming files RB.<x>.<plot design>.html, <plot design> indicated previously described files, <x> equals N, G, V, d /h according variables argument. relative biases related diameters plotted chart (files named RB.d.<plot design>.html), applies related heights (files named RB.h.<plot design>.html).","code":""},{"path":"/reference/relative.bias.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Relative Bias Between Field Estimations and TLS metrics — relative.bias","text":"results obtained using function merely descriptive, guarantee type statistical accuracy using TLS metrics instead field estimations order estimate forest attributes interest.","code":""},{"path":"/reference/relative.bias.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Relative Bias Between Field Estimations and TLS metrics — relative.bias","text":"Juan Alberto Molina-Valero, María José Ginzo Villamayor, Manuel Antonio Novo Pérez, Adela Martínez-Calvo, Juan Gabriel Álvarez-González, Fernando Montes César Pérez-Cruzado.","code":""},{"path":[]},{"path":"/reference/relative.bias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative Bias Between Field Estimations and TLS metrics — relative.bias","text":"","code":"# \\donttest{  # Load variables estimated from field data, and TLS metrics # corresponding to Rioja data set  data(\"Rioja.simulations\")   # Establish directory where relative bias results corresponding to Rioja example # will be saved. For instance, current working directory  dir.result <- getwd()   # Compute relative bias between field-based estimates of TLS metrics # corresponding to Rioja example # Relative bias for variables by default  rb <- relative.bias(simulations = simulations, dir.result = dir.result) #> Computing relative bias for fixed area plots #>  (8.15 secs) #> Computing relative bias for k-tree plots #>  (7.5 secs) #> Computing relative bias for angle-count plots #>  (5.8 secs)   # Relative bias for variable 'N'  rb <- relative.bias(simulations = simulations, variables = \"N\",                     dir.result = dir.result) #> Computing relative bias for fixed area plots #>  (1.51 secs) #> Computing relative bias for k-tree plots #>  (1.18 secs) #> Computing relative bias for angle-count plots #>  (1.11 secs)   # Relative bias corresponding to angle-count design for all available variables  rb <- relative.bias(simulations = simulations[\"angle.count\"],                     variables <- c(\"N\", \"G\", \"V\", \"d\", \"dg\", \"dgeom\", \"dharm\",                                    \"d.0\", \"dg.0\", \"dgeom.0\", \"dharm.0\", \"h\",                                    \"hg\", \"hgeom\", \"hharm\", \"h.0\", \"hg.0\",                                    \"hgeom.0\", \"hharm.0\"),                     dir.result = dir.result) #> Computing relative bias for angle-count plots #>  (6.58 secs)   # }"},{"path":"/reference/simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Metrics and Variables for Simulated TLS and Field Plots — simulations","title":"Compute Metrics and Variables for Simulated TLS and Field Plots — simulations","text":"Computes TLS metrics derived simulated TLS plots variables estimated basis simulated field plots. Real TLS field data set plots required order build simulated plots. Three different plot designs currently available: circular fixed area, k-tree angle-count. simulation process, plots incremental values radius, k BAF simulated circular fixed area, k-tree angle-count designs, respectively, according parameters specified plot.parameters argument. TLS metrics, different method included correcting occlusions generated TLS point clouds.","code":""},{"path":"/reference/simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Metrics and Variables for Simulated TLS and Field Plots — simulations","text":"","code":"simulations(tree.tls, tree.ds = NULL, tree.field,             plot.design = c(\"fixed.area\", \"k.tree\", \"angle.count\"),             plot.parameters = data.frame(radius.max = 25, k.max = 50, BAF.max = 4),             scan.approach = \"single\", var.metr = list(tls = NULL, field = NULL),             dbh.min = 4, h.min = 1.3, max.dist = Inf,             dir.data = NULL, save.result = TRUE, dir.result = NULL)"},{"path":"/reference/simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Metrics and Variables for Simulated TLS and Field Plots — simulations","text":"tree.tls Data frame information trees detected TLS point cloud data.   structure format must analogous output  returned   tree.detection.single.scan tree.detection.multi.scan (tree.detection.several.plots) functions. particular, row must   correspond (plot, tree) pair, must include least following columns: id, file, tree, x, y,       phi.left, phi.right, horizontal.distance,       dbh, num.points, num.points.hom,       num.points.est, num.points.hom.est,       partial.occlusion: description format indicated       named columns tree.detection.single.scan ‘Value’.  tree.ds optional list containing results arises application distance   sampling methodologies. structure format must analogous output   returned distance.sampling function. particular, must   include least following elements: tree: data frame detection probabilities tree       using distance sampling methodologies. row must correspond       (plot, tree) pair, must include least following columns: id, tree, P.hn, P.hn.cov,           P.hr, P.hr.cov: description format           indicated named columns tree distance.sampling ‘Value’. addition, plot           identification tree numbering included id           tree columns must coincide included           named columns tree.tls argument. argument specified user, set NULL   default , consequence, TLS metrics using distance sampling based   correction calculated circular fixed area k-tree plot designs. tree.field Data frame information trees measured field plots.   row must correspond (plot, tree) pair, must include least   following columns: id: plot identification encoded character string       numeric. Plot identifications must coincide       included id column tree.tls argument. tree: trees numbering. horizontal.distance: horizontal distance (m) plot       centre tree centre. Centres field plots must coincide       centres corresponding TLS plots. dbh: tree diameter (cm) breast height (1.3 m). total.height: tree total height (m). dead: integer value indicating tree dead       (1) (NA).  plot.design Vector containing plot designs considered. default, plot designs considered (circular fixed area, k-tree angle-count plots). plot.parameters Optional list containing parameters circular fixed area, k-tree angle-count   plot designs. User can set following parameters specifying   named elements list: radius.max: maximum radius (m) allowed increasing       sequence radius values used simulation process TLS       field plots circular fixed area plot design. element included       argument, circular fixed area plots simulated. radius.increment: positive increment (m) increasing       sequence radius values used simulation process TLS       field plots circular fixed area plot design. element included       argument, set 0.1 m default. k.tree.max: maximum number trees (trees) allowed       increasing sequence k values used simulation process       TLS field plots k-tree plot design. element       included argument, k-tree plots simulated. BAF.max: maximum BAF (\\({m}^{2}/ha\\)) allowed increasing       sequence BAF values used simulation process TLS       field plots angle-count plot design. element       included argument, angle-count plots simulated. BAF.increment: positive increment (\\({m}^{2}/ha\\)) increasing       sequence BAF values used simulation process TLS       field plots angle-count plot design. element       included argument, set 0.1 \\({m}^{2}/ha\\) default. num.trees: number dominant trees per ha (tree/ha)       used calculating dominant diameters heights simulation       process TLS field plots available plot designs.       Dominant trees largest diameter breast height.       element included plot.parameters argument,       set 100 trees/ha default. argument specified user, must include least one   following elements: radius.max, k.tree.max   BAF.max. argument specified user, set   list(radius.max = 25, k.tree.max = 50, BAF.max = 4) default ,   consequence, three available plot designs simulated. scan.approach Character parameter indicating TLS single-scan (‘single’) TLS multi-scan approach SLAM point clouds (‘multi’) approaches. argument specified user, set ‘multi’ approach. var.metr Optional vector containing metrics variables interest. default set NULL thus, metrics variables available generated. dbh.min Optional minimum dbh (cm) considered detecting trees. default set 4 cm. h.min Optional minimum h (m) considered detecting trees. default set 1.3 m. max.dist Optional argument specify maximum horizontal distance considered trees included. dir.data Optional character string naming absolute path directory TXT   files containing TLS point clouds located. .Platform$file.sep must   used path separator dir.dat, TXT files   directory must description format indicated TXT   files normalize ‘Output Files’.   argument specified user, set NULL default   , consequence, current working directory R process   assigned dir.dat execution. save.result Optional logical indicates wheter output files described   ‘Output Files’ section must saved dir.result.   argument specified user, set TRUE   default , consequence, output files saved. dir.result Optional character string naming absolute path existing directory   files described ‘Output Files’ section saved.   .Platform$file.sep must used path separator   dir.result. argument specified user,   save.result TRUE, set NULL default ,   consequence, current working directory R process   assigned dir.result execution.","code":""},{"path":"/reference/simulations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Metrics and Variables for Simulated TLS and Field Plots — simulations","text":"Using real TLS field data set plots, function enables construction simulated plots different plot designs computation corresponding TLS metrics estimated variables. notation used variables based IUFRO (1959). stage, three plot designs available: Circular fixed area plots, simulated radius.max value     specified plot.parameters argument. k-tree plots, simulated k.tree.max value     specified plot.parameters argument. Angle-count plots, simulated BAF.max value     specified plot.parameters argument. real plot, simulation process run plot designs specified means elements plot.parameters argument. Although minor differences depending plot design, rough outline simulation process similar , consists following main steps: Define increasing sequence plot design parameter (radius,     k BAF) according maximum value , applicable, positive     increment set plot.parameters argument. Build simulated plots parameter value previous     sequence based either TLS field data. Compute either TLS metrics variables estimated basis     simulated plots parameter value (see ‘Value’ section     details). simulated TLS plots, note     addition counterparts variables computed simulated field     plots, function also computes following: Metrics related number points belonging normal tree         sections. Metrics occlusion corrections based following: Distance sampling methodologies (Astrup et al., 2014)           circular fixed area k-tree plot designs, distance.sampling           argument NULL. Correction shadowing effect (Seidel & Ammer, 2014)           circular fixed area k-tree plot designs. Gap probability attenuation distance TLS (Strahler et           al., 2008; Lovell et al., 2011) angle-count plot design. Height percentiles derived z coordinates TLS point clouds          relative ground level.","code":""},{"path":"/reference/simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Metrics and Variables for Simulated TLS and Field Plots — simulations","text":"List field estimates TLS metrics plot designs considered. contain one element per plot design considered (fixed.area.plot, k.tree.plot angle.count.plot) fixed.area.plot value radius.max specified plot.parameters   argument, NULL; otherwise, data frame TLS metrics variables estiamted basis simulated plots circular fixed area plot design. row correspond (plot, radius) pair,   following columns included: Plot identification radius: id: plot identification encoded character string       numeric. coincide included id       column tree.tls, tree.field , applicable,       distance.sampling arguments. radius: radius (m) simulated plot. Variables estimated basis simulated field plots: N: stand density (trees/ha). G: stand basal area (\\({m}^{2}/ha\\)). V: stand volume (\\({m}^{3}/ha\\)). d, dg, dgeom, dharm: mean tree       diameters (cm) breast height (1.3 m), calculated arithmetic mean, quadratic       mean, geometric mean harmonic mean, respectively. h, hg, hgeom, hharm: mean tree       heights (m), calculated arithmetic mean, quadratic mean, geometric mean       harmonic mean, respectively. d.0, dg.0, dgeom.0, dharm.0: dominant       mean tree diameters (cm) breast height (1.3 m), calcualted arithmetic mean,       quadratic mean, geometric mean harmonic mean, respectively. h.0, hg.0, hgeom.0, hharm.0: dominant       mean tree heights (m), calculated arithmetic mean, quadratic mean, geometric       mean harmonic mean, respectively. TLS variables derived simulated TLS plots: N.tls: stand density (trees/ha) without occlusion       corrections. N.hn, N.hr, N.hn.cov, N.hr.cov: stand       density (trees/ha) occlusion corrections based distance sampling       methodologies. columns missing distance.sampling       argument NULL. N.sh: stand density (trees/ha) correction       shadowing effect. G.tls: stand basal area (\\({m}^{2}/ha\\)) without occlusion       corrections. G.hn, G.hr, G.hn.cov, G.hr.cov: stand       basal area (\\({m}^{2}/ha\\)) occlusion corrections based distance sampling       methodologies. columns missing distance.sampling       argument NULL. G.sh: stand basal area (\\({m}^{2}/ha\\)) correction       shadowing effect. V.tls: stand volume (\\({m}^{3}/ha\\)) without occlusion corrections. V.hn, V.hr, V.hn.cov, V.hr.cov: stand       volume (\\({m}^{3}/ha\\)) occlusion corrections based distance sampling       methodologies.  columns missing distance.sampling       argument NULL. V.sh: stand volume (\\({m}^{3}/ha\\)) correction       shadowing effect. d.tls, dg.tls, dgeom.tls, dharm.tls:       mean tree diameters (cm) breast height (1.3 m), calculated arithmetic mean,       quadratic mean geometric mean, harmonic mean, respectively. h.tls, hg.tls, hgeom.tls, hharm.tls:       mean tree heights (m), calculated arithmetic mean, quadratic mean, geometric       mean harmonic mean, respectively. d.0.tls, dg.0.tls, dgeom.0.tls,       dharm.0.tls: dominant mean tree diameters (cm) breast height       (1.3 m), calculated arithmetic mean, quadratic mean, geometric mean       harmonic mean, respectively. h.0.tls, hg.0.tls, hgeom.0.tls,       hharm.0.tls: dominant mean tree heights (m), calculated arithmetic       mean, quadratic mean, geometric mean harmonic mean, respectively. TLS metrics derived simulated TLS plots: num.points, num.points.est, num.points.hom,       num.points.hom.est: number points estimated number       points (points) belonging trees normal sections (+/- 5 cm)       original point cloud (num.points num.points.est,       respectively); number points estimated number points       (points) belonging trees normal sections (+/- 5 cm) reduced       point cloud (num.points.hom num.points.hom.est,       respectively). P01, P05, P10, P20, P25,       P30, P40, P50, P60, P70, P75,       P80, P90, P95, P99: height percentiles       derived z coordinates TLS point clouds relative ground level.  k.tree.plot value k.tree.max specified plot.parameters   argument, NULL; otherwise data frame TLS metrics estimations   variables based simulated plots k-tree plot design. row correspond (plot, k) pair, following   columns included: Plot identification k: id: plot identification encoded character string       numeric. id coincide included id       column tree.tls, tree.field , applicable,       distance.sampling arguments. k: number trees (trees) simulated plot. Estimated variables based simulated field plots: N, G, V, d, dg, dgeom,       dharm, h, hg, hgeom, hharm,       d.0, dg.0, dgeom.0, dharm.0, h.0,       hg.0, hgeom.0, hharm.0: description format       indicated fixed.area.plot element. TLS variables derived simulated TLS plots: N.tls, N.hn, N.hr, N.hn.cov, N.hr.cov, N.sh, G.tls, G.hn, G.hr, G.hn.cov, G.hr.cov, G.sh, V.tls, V.hn, V.hr, V.hn.cov, V.hr.cov, V.sh, d.tls, dg.tls, dgeom.tls, dharm.tls, h.tls, hg.tls, hgeom.tls, hharm.tls, d.0.tls, dg.0.tls, dgeom.0.tls, dharm.0.tls, h.0.tls, hg.0.tls, hgeom.0.tls, hharm.0.tls TLS metrics derived simulated TLS plots: num.points, num.points.est, num.points.hom, num.points.hom.est, P01, P05, P10, P20, P25, P30, P40, P50, P60, P70, P75, P80, P90, P95, P99: description format indicated       fixed.area.plot element. angle.count.plot value BAF.max specified plot.parameters   argument, NULL; otherwise data frame include TLS metrics estimated   variables based simulated plots angle-count plot design.   row correspond (plot, BAF) pair,   following columns included: Plot identification BAF: id: plot identification encoded character string       numeric. id coincide included id       column tree.tls tree.field. BAF: BAF (\\({m}^{2}/ha\\)) simulated plot. Estimated variables based simulated field plots: N, G, V, d, dg, dgeom,       dharm, h, hg, hgeom, hharm,       d.0, dg.0, dgeom.0, dharm.0, h.0,       hg.0, hgeom.0, hharm.0: description format       indicated fixed.area.plot element. TLS variables derived simulated TLS plots: N.tls: description format indicated       fixed.area.plot element. N.pam: stand density (trees/ha) occlusion correction       based gap probability attenuation distance TLS. G.tls: description format indicated       fixed.area.plot element. G.pam: stand basal area (\\({m}^{2}/ha\\)) occlusion correction       based gap probability attenuation distance TLS. V.tls: description format indicated       fixed.area.plot element. V.pam: stand volume (\\({m}^{3}/ha\\))occlusion correction based       gap probability attenuation distance TLS. d.tls, dg.tls, dgeom.tls, dharm.tls, h.tls, hg.tls, hgeom.tls, hharm.tls, d.0.tls, dg.0.tls, dgeom.0.tls, dharm.0.tls, h.0.tls, hg.0.tls, hgeom.0.tls, hharm.0.tls TLS metrics derived simulated TLS plots: num.points, num.points.est, num.points.hom,       num.points.hom.est, P01, P05, P10, P20, P25, P30,       P40, P50, P60, P70, P75, P80,       P90, P95, P99: description format       indicated fixed.area.plot element.","code":""},{"path":"/reference/simulations.html","id":"output-files","dir":"Reference","previous_headings":"","what":"Output Files","title":"Compute Metrics and Variables for Simulated TLS and Field Plots — simulations","text":"end simulation process, save.result argument TRUE, function print elements described ‘Value’ section different NULL files. Data frames written without row names dir.result directory using write.csv function utils package. pattern used naming files simulations.<plot design>.csv, <plot design> equal “fixed.area.plot”, “k.tree.plot” “angle.count.plot” according plot design.","code":""},{"path":"/reference/simulations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Metrics and Variables for Simulated TLS and Field Plots — simulations","text":"Astrup, R., Ducey, M. J., Granhus, ., Ritter, T., & von Lüpke, N. (2014). Approaches estimating stand level volume using terrestrial laser scanning single-scan mode. Canadian Journal Forest Research, 44(6), 666-676. doi:10.1139/cjfr-2013-0535 IUFRO (1959). Standarization symbols forest mensuration. IUFRO, Wien, 32 pp. Lovell, J. L., Jupp, D. L. B., Newnham, G. J., & Culvenor, D. S. (2011). Measuring tree stem diameters using intensity profiles ground-based scanning lidar fixed viewpoint. ISPRS Journal Photogrammetry Remote Sensing, 66(1), 46-55. doi:10.1016/j.isprsjprs.2010.08.006 Seidel, D., & Ammer, C. (2014). Efficient measurements basal area short rotation forests based terrestrial laser scanning special consideration shadowing. iForest-Biogeosciences Forestry, 7(4), 227. doi:10.3832/ifor1084-007 Strahler, . H., Jupp, D. L. B., Woodcock, C. E., Schaaf, C. B., Yao, T., Zhao, F., Yang, X., Lovell, J., Culvenor, D., Newnham, G., Ni-Miester, W., & Boykin-Morris, W. (2008). Retrieval forest structural parameters using ground-based lidar instrument (Echidna®). Canadian Journal Remote Sensing, 34(sup2), S426-S440. doi:10.5589/m08-046","code":""},{"path":"/reference/simulations.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute Metrics and Variables for Simulated TLS and Field Plots — simulations","text":"simulation process implemented function computationally intensive. Although function currently uses vroom function vroom package reading large files contains fast implementations several critical calculations (C++ via Rcpp package), long computation times may required large number plots considered, number points TLS point clouds high, radius, k BAF sequences used simulation process long. Using reduced point clouds (according point cropping process implemented normalize function), rather original ones, may recommended order cut computing time. Another possibility specify large increments radius BAF, /low maximum values radius, number trees BAF plot.parameters argument. make function efficient, though may notable loss detail results generated.","code":""},{"path":"/reference/simulations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Metrics and Variables for Simulated TLS and Field Plots — simulations","text":"Juan Alberto Molina-Valero, María José Ginzo Villamayor, Manuel Antonio Novo Pérez, Adela Martínez-Calvo, Juan Gabriel Álvarez-González, Fernando Montes César Pérez-Cruzado.","code":""},{"path":[]},{"path":"/reference/simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Metrics and Variables for Simulated TLS and Field Plots — simulations","text":"","code":"# \\donttest{  # Load information of trees detected from TLS point clouds data corresponding to # plot 1 from Rioja data set  data(\"Rioja.data\") example.tls <- subset(Rioja.data$tree.tls, id == 1)  # Compute detection probabilities using distance sampling methods  example.ds <- distance.sampling(example.tls) #> Warning: First partial hessian is singular; using second-partial hessian #> Warning: First partial hessian is singular; using second-partial hessian #> Warning: First partial hessian is singular; using second-partial hessian  # Load information of trees measured in field plots corresponding to plot 1 from # Rioja data set  example.field <- subset(Rioja.data$tree.field, id == 1)  # Establish directory where TXT file containing TLS point cloud corresponding to # plot 1 from Rioja data set is located. For instance, current working directory  dir.data <- getwd()  # Download example of TXT file corresponding to plot 1 from Rioja data set  download.file(url = \"https://www.dropbox.com/s/w4fgcyezr2olj9m/Rioja_1.txt?dl=1\",               destfile = file.path(dir.data, \"1.txt\"), mode = \"wb\")  # Establish directory where simulation results corresponding to plot 1 from # Rioja data set will be saved. For instance, current working directory  dir.result <- getwd()  # Compute metrics and variables for simulated TLS and field plots corresponding # to plot 1 from Rioja data set # Without occlusion correction based on distance sampling methods  sim <- simulations(tree.tls = example.tls, tree.field = example.field,                    plot.parameters = data.frame(radius.max = 10, k.max = 20,                                                 BAF.max = 2),                    dir.data = dir.data, dir.result = dir.result) #> Computing simulations for plot: '1' #> Warning: cannot xtfrm data frames #>  (304.54 secs)   # }"},{"path":"/reference/tree.detection.multi.scan.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree-Level Variables Estimation — tree.detection.multi.scan","title":"Tree-Level Variables Estimation — tree.detection.multi.scan","text":"Detects trees point clouds corresponding TLS multi-scan approaches SLAM devices. tree detected, function calculates central coordinates estimates diameter 1.3 m ground level (known dbh, diameter breast height) classifies fully visible partially occluded. Finally, function obtains number points belonging normal sections trees (corresponding dbh +/- 5 cm) estimates original reduced (random selection process) point clouds.","code":""},{"path":"/reference/tree.detection.multi.scan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree-Level Variables Estimation — tree.detection.multi.scan","text":"","code":"tree.detection.multi.scan(data,                           dbh.min = 4, dbh.max = 200, h.min = 1.3,                           ncr.threshold = 0.1,                           tls.precision = NULL,                           stem.section = NULL, breaks = NULL,                           den.type = 1, d.top = NULL,                           plot.attributes = NULL,                           save.result = TRUE, dir.result = NULL)"},{"path":"/reference/tree.detection.multi.scan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree-Level Variables Estimation — tree.detection.multi.scan","text":"data Data frame description format indicated normalize ‘Value’. dbh.min Optional minimum dbh (cm) considered detecting trees. default set 4 cm. dbh.max Optional maximum dbh (cm) considered detecting trees. default set 200 cm. h.min Optional minimum h (m) considered detecting trees. default set 1.3 m. ncr.threshold Local surface variation (also known normal change rate, NCR). default set 0.1. better understanding argument see ‘Details’. tls.precision Average point cloud precision cm. breaks Height ground level (m) slices considered detecting trees. default considered possible sections 0.4 m maximum height 0.3 m intervals (+/- 5 cm). stem.section Section free noise (shurb, branches, etc.) considered detect trees. specified, automatic internal algorithm applied (see ‘Details’). den.type Numeric argument indicating dendrometic type used estimate volumen sections enough fit taper equation. Dendrometrics types available following: cylinder = 0, paraboloid = 1 (default), cone = 2 neiloid = 3. d.top Top stem diameter (cm) considered estimate commercial timber volume. plot.attributes Data frame attributes plot level. must contain column named id (character string numeric value) encoding coinciding used id argument normalize identifying plots. strata, another column named ‘stratum’ (numeric) required functionalities FORTLS (see, instance, estimation.plot.size metrics.variables). argument specified user, set NULL default , consequence, function add possible plot attributes. save.result Optional logical indicates whether output files described ‘Output Files’ section saved dir.result. argument specified user, set TRUE default , consequence, output files saved. dir.result Optional character string naming absolute path existing directory files described ‘Output Files’ section saved. .Platform$file.sep must used path separator dir.result. argument specified user, save.result TRUE, set NULL default , consequence, current working directory R process assigned dir.result execution.","code":""},{"path":"/reference/tree.detection.multi.scan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tree-Level Variables Estimation — tree.detection.multi.scan","text":"Slices determined breaks argument clustered using DBSCAN algorithm (Ester et al., 1996) horizontal plane according Cartesian coordinates (x, y). process, several algorithms used remove noisy points apply classification criteria select clusters trees. dbh directly estimated section 1.3 m ground level, estimated sections using dbh~breaks linear regression. Finally, mean value estimates provided ‘Value’ dbh tree section. Volume estimated modelling stem profile paraboloid calculating volumes revolution; trees dbh estimated tree.detection.single.scan, total heights estimated percentile 99 z coordinate points delimited Voronoi polygons. number points corresponding normal section (+/- 5 cm) estimated proportion dbh, using average number points per radius unit reference. respect, tree sections fully visible 1.3 m ground level considered estimating average number points. Local surface variation (also known normal change rate ,NCR), quantitative measure curvature feature (Pauly et al., 2002). useful distinguishing points belonging fine branches foliage (e.g. leaves, shrubs) stem points (e.g. Jin et al., 2016; Zhang et al., 2019). Just considered 5 cm suitable calculating local surface variation stem separation forests, according authors (Ma et al., 2015; Xia et al., 2015), also established NCR threshold 0.1, according Zhang et al. (2019). However, argument (ncr.threshold) may modified order use appropriate values.","code":""},{"path":"/reference/tree.detection.multi.scan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree-Level Variables Estimation — tree.detection.multi.scan","text":"Data frame following columns every tree detected (row corresponds one tree detected): id Optional plot identification encoded character string numeric. argument specified user, set NULL default , consequence, plot encoded 1. file Optional file name identification encoded character string numeric. null, file encoded id default. tree tree numbering Coordinates Cartesian (according https://en.wikipedia.org/wiki/Cartesian_coordinate_system notation): x: distance x axis (m) tree centre. y: distance y axis (m) tree centre. Azimuthal angles:  phi: angular coordinate (rad) tree centre. h.dist horizontal distance (m) plot centre tree centre. dbh estimated tree diameter (cm) breast height (1.3 m). h estimated tree total height (m). v estimated tree stem volume (m^3). v.com estimated commercial tree stem volume (m^3) according top diameter defined argument d.top. n.pts number points corresponding normal section (+/- 5 cm) original point cloud. n.pts.red number points corresponding normal section (+/- 5 cm) point cloud reduced point cropping process. n.pts.est number points estimated normal section (+/- 5 cm) original point cloud. n.pts.red.est number points estimated normal section (+/- 5 cm) point cloud reduced point cropping process. partial.occlusion yes (1) (0)","code":""},{"path":"/reference/tree.detection.multi.scan.html","id":"output-files","dir":"Reference","previous_headings":"","what":"Output Files","title":"Tree-Level Variables Estimation — tree.detection.multi.scan","text":"end tree detection process, save.result argument TRUE, function save data frame described ‘Value’ CSV file named ‘tree.tls.csv’. data frame written without row names dir.result directory using write.csv function utils package.","code":""},{"path":"/reference/tree.detection.multi.scan.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tree-Level Variables Estimation — tree.detection.multi.scan","text":"Although tree.detection.multi.scan also works reduced point clouds, thus reducing computing time, use original point cloud recommended order detect trees. also depend forest conditions, especially related visibility. distant trees , lower density points , using reduced point clouds therefore complicate detection distant trees. Note dbh.min dbh.max important avoiding outlier values inventory data used reference purposes. Otherwise, knowledge autoecology species used filtering anomalous values dbh. argument breaks = 1.3 sufficient detecting trees visible dbh, involving lower computational cost. However, trees detected dbh, may estimated lower /higher sections. Considering three default sections argument breaks = c(1.0, 1.3, 1.6) maintains good balance case study package.","code":""},{"path":"/reference/tree.detection.multi.scan.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tree-Level Variables Estimation — tree.detection.multi.scan","text":"Ester, M., Kriegel, H. P., Sander, J., & Xu, X. (1996). density-based algorithm discovering clusters large spatial databases noise. Kdd (Vol. 96, . 34, pp. 226-231). Jin, S., Tamura, M., & Susaki, J. (2016). new approach retrieve leaf normal distribution using terrestrial laser scanners. J. Journal Forestry Research, 27(3), 631-638. doi:10.1007/s11676-015-0204-z Ma, L., Zheng, G., Eitel, J. U., Moskal, L. M., , W., & Huang, H. (2015). Improved salient feature-based approach automatically separating photosynthetic nonphotosynthetic components within terrestrial lidar point cloud data forest canopies. IEEE Transactions Geoscience Remote Sensing, 54(2), 679-696. doi:10.1109/TGRS.2015.2459716 Pauly, M., Gross, M., & Kobbelt, L. P., (2002). Efficient simplification point-sampled surfaces. IEEE Conference Visualization. (pp. 163-170). Boston, USA. doi:10.1109/VISUAL.2002.1183771 Xia, S., Wang, C., Pan, F., Xi, X., Zeng, H., & Liu, H. (2015). Detecting stems dense homogeneous forest using single-scan TLS. Forests. 6(11), 3923-3945. doi:10.3390/f6113923 Zhang, W., Wan, P., Wang, T., Cai, S., Chen, Y., Jin, X., & Yan, G. (2019). novel approach detection standing tree stems plot-level terrestrial laser scanning data. Remote Sens. 11(2), 211. doi:10.3390/rs11020211","code":""},{"path":"/reference/tree.detection.multi.scan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tree-Level Variables Estimation — tree.detection.multi.scan","text":"Juan Alberto Molina-Valero Adela Martínez-Calvo.","code":""},{"path":[]},{"path":"/reference/tree.detection.multi.scan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree-Level Variables Estimation — tree.detection.multi.scan","text":"","code":"# \\donttest{  # Establishment of working directories (optional) # By default here we propose the current working directory of the R process  dir.data <- getwd() dir.result <- getwd()   # Loading example data of TLS multi-scan approach point cloud (LAZ file) to dir.data  download.file(\"https://www.dropbox.com/s/j48chrbngwoma6y/Galicia_multi_scan.laz?dl=1\",               destfile = file.path(dir.data, \"Galicia_multi_scan.laz\"),               mode = \"wb\")  # Normalizing the whole point cloud data without considering arguments  pcd <- normalize(las = \"Galicia_multi_scan.laz\",                   scan.approach = \"multi\",                   max.dist = 15,                   dir.data = dir.data, dir.result = dir.result)   # Tree detection without considering arguments  tree.tls <- tree.detection.multi.scan(data = pcd[pcd$prob.selec == 1, ],                                        breaks = 1.3, stem.section = c(1, 5),                                        dir.result = dir.result) #> Loading required namespace: rgeos #> Computing section: 1.3 m    # }"},{"path":"/reference/tree.detection.several.plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree-Level Variables Estimation for Several Plots — tree.detection.several.plots","title":"Tree-Level Variables Estimation for Several Plots — tree.detection.several.plots","text":"function integrates , normalize tree.detection.single.scan tree.detection.multi.scan functions, generating ‘Output Files’ indicated , returs ‘Value’ described tree.detection.single.scan tree.detection.multi.scan respectively. However, function designed working several plots, producing list scans considered automatically LAS files.","code":""},{"path":"/reference/tree.detection.several.plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree-Level Variables Estimation for Several Plots — tree.detection.several.plots","text":"","code":"tree.detection.several.plots(las.list, id = NULL, file = NULL,                               scan.approach = \"single\",                              pcd.red = NULL, normalized = NULL,                              x.center = NULL, y.center = NULL,                              max.dist = NULL, min.height = NULL, max.height = 50,                              algorithm.dtm = \"knnidw\", res.dtm = 0.2,                              csf = list(cloth_resolution = 0.5),                              RGB = NULL,                               dbh.min = 4, dbh.max = 200, h.min = 1.3,                              ncr.threshold = 0.1,                              tls.resolution = NULL, tls.precision = NULL,                              stem.section = NULL, breaks = NULL,                              den.type = 1, d.top = NULL,                               plot.attributes = NULL,                               dir.data = NULL, save.result = TRUE, dir.result = NULL)"},{"path":"/reference/tree.detection.several.plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree-Level Variables Estimation for Several Plots — tree.detection.several.plots","text":"las.list Character vector containing names LAS files analysis belonging TLS point cloud, including .las extension (see ‘Examples’) id Optional vector plots identification encoded character string numeric. argument specified user, set NULL default , consequence, plots encoded correlative numbers 1 n plots. file Optional vector containing files name identification encoded character string numeric value. null, file encoded id default. scan.approach Character parameter indicating TLS single-scan (‘single’) TLS multi-scan approach SLAM point clouds (‘multi’) approaches. argument specified user, set ‘multi’ approach. pcd.red Optional argument indicate point cloud density must reduced detect trees. normalized Optional argument establish TRUE point cloud already normalized. x.center Planimetric x center coordinate point cloud data. y.center Planimetric y center coordinate point cloud data. max.dist Optional maximum horizontal distance (m) considered plot centre. points farther max.dist discarded normalization process. argument specified user, set NULL default , consequence, points used processing, max.dist representing farthest point. min.height Optional minimum height (m) considered ground level. points min.height discarded normalization process. argument specified user, set NULL default , consequence, points used processing, min.height representing lowest point. max.height Optional maximum height (m) considered ground level. points max.height discarded normalization process. argument specified user, set NULL default , consequence, points used processing, max.height representing highest point. algorithm.dtm Algorithm used generate digital terrain model (DTM) TLS point cloud. two posible options based spatial interpolation: ‘tin’ ‘knnidw’ (see ‘Details’). argument specified user, set ‘knnidw’ algorithm. res.dtm Numeric parameter. Resolution DTM generated normalize point cloud (see ‘Details’). argument specified user, set 0.2 m. csf List containing parameters CSF algorithm: cloth_resolution: default 0.5. RGB Logical parameter useful point clouds colorized, thus including values RGB colors. based Green Leaf Algorithm (GLA) (see ‘Details’). dbh.min Optional minimum dbh (cm) considered detecting trees. default set 4 cm. dbh.max Optional maximum dbh (cm) considered detecting trees. default set 200 cm. h.min Optional minimum h (m) considered detecting trees. default set 1.3 m. ncr.threshold Local surface variation (also known normal change rate, NCR). default set 0.1. better understanding argument see ‘Details’. tls.resolution List containing parameters TLS resolution. can defined angle aperture: horizontal.angle: horizontal angle aperture (degrees). vertical.angle: vertical angle aperture (degrees). point.dist: distance (mm) two consecutive points. tls.dist: distance (m) TLS two consecutive points separated point.dist. argument specified user, set NULL default , consequence function stop giving error message. tls.precision Optional argument indicating average point cloud precision cm. breaks Height ground level (m) slices considered detecting trees. default considered possible sections 0.1 m maximum height 0.3 m intervals (+/- 5 cm). stem.section Section free noise (shurb, branches, etc.) considered detect trees. specified, automatic internal algorithm applied (see ‘Details’). d.top Top stem diameter (cm) considered estimate commercial timber volume. den.type Numeric argument indicating dendrometic type used estimate volumen sections enough fit taper equation. Dendrometrics types available following: cylinder = 0, paraboloid = 1 (default), cone = 2 neiloid = 3. plot.attributes Data frame attributes plot level. must contain column named id (character string numeric value) encoding coinciding used id argument normalize identifying plots. strata, another column named ‘stratum’ (numeric) required functionalities FORTLS (see, instance, estimation.plot.size metrics.variables). argument specified user, set NULL default , consequence, function add possible plot attributes. dir.data Optional character string naming absolute path directory LAS files containing TLS point clouds located. .Platform$file.sep must used path separator dir.dat. argument specified user, set NULL default , consequence, current working directory R process assigned dir.dat execution. save.result Optional logical indicates whether output files described ‘Output Files’ section saved dir.result. argument specified user, set TRUE default , consequence, output files saved. dir.result Optional character string naming absolute path existing directory files described ‘Output Files’ section saved. .Platform$file.sep must used path separator dir.result. argument specified user, save.result TRUE, set NULL default , consequence, current working directory R process assigned dir.result execution.","code":""},{"path":"/reference/tree.detection.several.plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tree-Level Variables Estimation for Several Plots — tree.detection.several.plots","text":"See normalize, tree.detection.single.scan tree.detection.multi.scan details.","code":""},{"path":"/reference/tree.detection.several.plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree-Level Variables Estimation for Several Plots — tree.detection.several.plots","text":"Data frame description format tree.detection.single.scan tree.detection.multi.scan  ‘Values’. case, id plots encoded correlative numbers 1 n, n number LAS files included files argument, file column encoded id, including .las extension.","code":""},{"path":"/reference/tree.detection.several.plots.html","id":"output-files","dir":"Reference","previous_headings":"","what":"Output Files","title":"Tree-Level Variables Estimation for Several Plots — tree.detection.several.plots","text":"end tree detection process, save.result argument TRUE, function save , reduced point clouds TXT files encoded according file column ‘Value’; data frame tree list described ‘Value’ CSV file (see normalize tree.detection.single.scan tree.detection.multi.scan ‘Output files’). outputs written without row names dir.result directory using vroom_write function vroom package.","code":""},{"path":"/reference/tree.detection.several.plots.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tree-Level Variables Estimation for Several Plots — tree.detection.several.plots","text":"function developed working several plots, common situation forest inventory approaches. Nevertheless, several LAS files provided examples due problems memory capacity.","code":""},{"path":"/reference/tree.detection.several.plots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tree-Level Variables Estimation for Several Plots — tree.detection.several.plots","text":"Juan Alberto Molina-Valero Adela Martínez-Calvo.","code":""},{"path":[]},{"path":"/reference/tree.detection.several.plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree-Level Variables Estimation for Several Plots — tree.detection.several.plots","text":"","code":"# \\donttest{  # Establishment of working directories (optional) # By default here we propose the current working directory of the R process  dir.data <- getwd() dir.result <- getwd()  # Loading example data (LAZ files) to dir.data  download.file(\"https://www.dropbox.com/s/j48chrbngwoma6y/Galicia_multi_scan.laz?dl=1\",               destfile = file.path(dir.data, \"Galicia_multi_scan.laz\"),               mode = \"wb\")  download.file(\"https://www.dropbox.com/s/ypar7fwqcht8aw6/Go_Fagus_SLAM.laz?dl=1\",               destfile = file.path(dir.data, \"Go_Fagus_SLAM.laz\"),               mode = \"wb\")   # Obtaining a vector with names of LAZ files located in dir.data  files <- list.files(pattern = \"laz$\", path = dir.data)   # Tree detection  tree.tls <- tree.detection.several.plots(las.list =                                          c(\"Galicia_multi_scan.laz\",                                          \"Go_Fagus_SLAM.laz\"),                                           scan.approach = \"multi\",                                           breaks = 1.3, stem.section = c(1,5)) #> Computing plot: 1 #> Normalizing #> Detecting trees #> Computing section: 1.3 m #> Computing plot: 2 #> Normalizing #> Detecting trees #> Computing section: 1.3 m    # }"},{"path":"/reference/tree.detection.single.scan.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree-Level Variables Estimation for TLS Single-Scan Approach — tree.detection.single.scan","title":"Tree-Level Variables Estimation for TLS Single-Scan Approach — tree.detection.single.scan","text":"Detects trees TLS point clouds corresponding single scan. tree detected, function calculates central coordinates estimates diameter 1.3 m ground level (known dbh, diameter breast height) classifies fully visible partially occluded. Finally, function obtains number points belonging normal sections trees (corresponding dbh +/- 5 cm) estimates original reduced (point cropping process) point clouds.","code":""},{"path":"/reference/tree.detection.single.scan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree-Level Variables Estimation for TLS Single-Scan Approach — tree.detection.single.scan","text":"","code":"tree.detection.single.scan(data,                            dbh.min = 4, dbh.max = 200, h.min = 1.3,                            ncr.threshold = 0.1,                            tls.resolution = list(),                            stem.section = NULL, breaks = NULL,                            den.type = 1, d.top = NULL,                            plot.attributes = NULL,                            save.result = TRUE, dir.result = NULL)"},{"path":"/reference/tree.detection.single.scan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree-Level Variables Estimation for TLS Single-Scan Approach — tree.detection.single.scan","text":"data Data frame description format indicated normalize ‘Value’. dbh.min Optional minimum dbh (cm) considered detecting trees. default set 4 cm. dbh.max Optional maximum dbh (cm) considered detecting trees. default set 200 cm. h.min Optional minimum h (m) considered detecting trees. default set 1.3 m. ncr.threshold Local surface variation (also known normal change rate, NCR). default set 0.1. better understanding argument see ‘Details’. tls.resolution List containing parameters TLS resolution. can defined angle aperture: horizontal.angle: horizontal angle aperture (degrees). vertical.angle: vertical angle aperture (degrees). point.dist: distance (mm) two consecutive points. tls.dist: distance (m) TLS two consecutive points separated point.dist. argument specified user, set NULL default , consequence function stop giving error message. breaks Height ground level (m) slices considered detecting trees. default considered possible sections 0.1 m maximum height 0.3 m intervals (+/- 5 cm). stem.section Section free noise (shurb, branches, etc.) considered detect trees. specified, automatic internal algorithm applied (see ‘Details’). d.top Top stem diameter (cm) considered estimate commercial timber volume. den.type Numeric argument indicating dendrometic type used estimate volumen sections enough fit taper equation. Dendrometrics types available following: cylinder = 0, paraboloid = 1 (default), cone = 2 neiloid = 3. plot.attributes Data frame attributes plot level. must contain column named id (character string numeric value) encoding coinciding used id argument normalize identifying plots. strata, another column named ‘stratum’ (numeric) required functionalities FORTLS (see, instance, estimation.plot.size metrics.variables). argument specified user, set NULL default , consequence, function add possible plot attributes. save.result Optional logical indicates whether output files described ‘Output Files’ section saved dir.result. argument specified user, set TRUE default , consequence, output files saved. dir.result Optional character string naming absolute path existing directory files described ‘Output Files’ section saved. .Platform$file.sep must used path separator dir.result. argument specified user, save.result TRUE, set NULL default , consequence, current working directory R process assigned dir.result execution.","code":""},{"path":"/reference/tree.detection.single.scan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tree-Level Variables Estimation for TLS Single-Scan Approach — tree.detection.single.scan","text":"Slices determined breaks argument clustered using DBSCAN algorithm (Ester et al., 1996) horizontal plane according Cartesian coordinates (x, y). process, several algorithms used remove noisy points apply classification criteria select clusters trees. dbh directly estimated section 1.3 m ground level, estimated sections using dbh~breaks linear regression. Finally, mean value estimates provided ‘Value’ dbh tree section. number points corresponding normal section (+/- 5 cm) estimated proportion dbh, using average number points per radius unit reference. respect, tree sections fully visible 1.3 m ground level considered estimating average number points. Local surface variation (also known normal change rate ,NCR), quantitative measure curvature feature (Pauly et al., 2002). useful distinguishing points belonging fine branches foliage (e.g. leaves, shrubs) stem points (e.g. Jin et al., 2016; Zhang et al., 2019). Just considered 5 cm suitable calculating local surface variation stem separation forests, according authors (Ma et al., 2015; Xia et al., 2015), also established NCR threshold 0.1, according Zhang et al. (2019). However, argument (ncr.threshold) may modified order use appropriate values.","code":""},{"path":"/reference/tree.detection.single.scan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree-Level Variables Estimation for TLS Single-Scan Approach — tree.detection.single.scan","text":"Data frame following columns every tree detected (row corresponds one tree detected): id Optional plot identification encoded character string numeric. argument specified user, set NULL default , consequence, plot encoded 1. file Optional file name identification encoded character string numeric. null, file encoded id default. tree tree numbering Coordinates Cartesian (according https://en.wikipedia.org/wiki/Cartesian_coordinate_system notation): x: distance x axis (m) tree centre. y: distance y axis (m) tree centre. Azimuthal angles:  phi: angular coordinate (rad) tree centre. phi.left: angular coordinate (rad) left border tree section. phi.right: angular coordinate (rad) right border tree section h.dist horizontal distance (m) plot centre tree centre. dbh estimated tree diameter (cm) breast height (1.3 m). h estimated tree total height (m). v estimated tree stem volume (m^3). v.com estimated commercial tree stem volume (m^3) according top diameter defined argument d.top. n.pts number points corresponding normal section (+/- 5 cm) original point cloud. n.pts.red number points corresponding normal section (+/- 5 cm) point cloud reduced point cropping process. n.pts.est number points estimated normal section (+/- 5 cm) original point cloud. n.pts.red.est number points estimated normal section (+/- 5 cm) point cloud reduced point cropping process. partial.occlusion yes (1) (0)","code":""},{"path":"/reference/tree.detection.single.scan.html","id":"output-files","dir":"Reference","previous_headings":"","what":"Output Files","title":"Tree-Level Variables Estimation for TLS Single-Scan Approach — tree.detection.single.scan","text":"end tree detection process, save.result argument TRUE, function save data frame described ‘Value’ CSV file named ‘tree.tls.csv’. data frame written without row names dir.result directory using write.csv function utils package.","code":""},{"path":"/reference/tree.detection.single.scan.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tree-Level Variables Estimation for TLS Single-Scan Approach — tree.detection.single.scan","text":"Although tree.detection also works reduced point clouds, thus reducing computing time, use original point cloud recommended order detect trees. also depend forest conditions, especially related visibility. distant trees , lower density points , using reduced point clouds therefore complicate detection distant trees. Note dbh.min dbh.max important avoiding outlier values inventory data used reference purposes. Otherwise, knowledge autoecology species used filtering anomalous values dbh. argument breaks = 1.3 sufficient detecting trees visible dbh, involving lower computational cost. However, trees detected dbh, may estimated lower /higher sections. Considering three default sections argument breaks = c(1.0, 1.3, 1.6) maintains good balance case study package.","code":""},{"path":"/reference/tree.detection.single.scan.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tree-Level Variables Estimation for TLS Single-Scan Approach — tree.detection.single.scan","text":"Ester, M., Kriegel, H. P., Sander, J., & Xu, X. (1996). density-based algorithm discovering clusters large spatial databases noise. Kdd (Vol. 96, . 34, pp. 226-231). Jin, S., Tamura, M., & Susaki, J. (2016). new approach retrieve leaf normal distribution using terrestrial laser scanners. J. Journal Forestry Research, 27(3), 631-638. doi:10.1007/s11676-015-0204-z Ma, L., Zheng, G., Eitel, J. U., Moskal, L. M., , W., & Huang, H. (2015). Improved salient feature-based approach automatically separating photosynthetic nonphotosynthetic components within terrestrial lidar point cloud data forest canopies. IEEE Transactions Geoscience Remote Sensing, 54(2), 679-696. doi:10.1109/TGRS.2015.2459716 Pauly, M., Gross, M., & Kobbelt, L. P., (2002). Efficient simplification point-sampled surfaces. IEEE Conference Visualization. (pp. 163-170). Boston, USA. doi:10.1109/VISUAL.2002.1183771 Xia, S., Wang, C., Pan, F., Xi, X., Zeng, H., & Liu, H. (2015). Detecting stems dense homogeneous forest using single-scan TLS. Forests. 6(11), 3923-3945. doi:10.3390/f6113923 Zhang, W., Wan, P., Wang, T., Cai, S., Chen, Y., Jin, X., & Yan, G. (2019). novel approach detection standing tree stems plot-level terrestrial laser scanning data. Remote Sens. 11(2), 211. doi:10.3390/rs11020211","code":""},{"path":"/reference/tree.detection.single.scan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tree-Level Variables Estimation for TLS Single-Scan Approach — tree.detection.single.scan","text":"Juan Alberto Molina-Valero Adela Martínez-Calvo.","code":""},{"path":[]},{"path":"/reference/tree.detection.single.scan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree-Level Variables Estimation for TLS Single-Scan Approach — tree.detection.single.scan","text":"","code":"# \\donttest{  # Establishment of working directories (optional) # By default here we propose the current working directory of the R process  dir.data <- getwd() dir.result <- getwd()   # Loading example data (LAZ file) to dir.data  download.file(\"https://www.dropbox.com/s/v9tomu358xgho25/Galicia_single_scan.laz?dl=1\",               destfile = file.path(dir.data, \"Galicia_single_scan.laz\"),               mode = \"wb\")   # Normalizing the whole point cloud data without considering arguments  pcd <- normalize(las = \"Galicia_single_scan.laz\",                   max.dist = 15,                   dir.data = dir.data, dir.result = dir.result) #> Inverse distance weighting: [===-----------------------------------------------] 6% (2 threads) Inverse distance weighting: [===-----------------------------------------------] 7% (2 threads) Inverse distance weighting: [====----------------------------------------------] 8% (2 threads) Inverse distance weighting: [====----------------------------------------------] 9% (2 threads) Inverse distance weighting: [=====---------------------------------------------] 10% (2 threads) Inverse distance weighting: [=====---------------------------------------------] 11% (2 threads) Inverse distance weighting: [======--------------------------------------------] 12% (2 threads) Inverse distance weighting: [======--------------------------------------------] 13% (2 threads) Inverse distance weighting: [=======-------------------------------------------] 14% (2 threads) Inverse distance weighting: [=======-------------------------------------------] 15% (2 threads) Inverse distance weighting: [========------------------------------------------] 16% (2 threads) Inverse distance weighting: [========------------------------------------------] 17% (2 threads) Inverse distance weighting: [=========-----------------------------------------] 18% (2 threads) Inverse distance weighting: [=========-----------------------------------------] 19% (2 threads) Inverse distance weighting: [==========----------------------------------------] 20% (2 threads) Inverse distance weighting: [==========----------------------------------------] 21% (2 threads) Inverse distance weighting: [===========---------------------------------------] 22% (2 threads) Inverse distance weighting: [===========---------------------------------------] 23% (2 threads) Inverse distance weighting: [============--------------------------------------] 24% (2 threads) Inverse distance weighting: [============--------------------------------------] 25% (2 threads) Inverse distance weighting: [=============-------------------------------------] 26% (2 threads) Inverse distance weighting: [=============-------------------------------------] 27% (2 threads) Inverse distance weighting: [==============------------------------------------] 28% (2 threads) Inverse distance weighting: [==============------------------------------------] 29% (2 threads) Inverse distance weighting: [===============-----------------------------------] 30% (2 threads) Inverse distance weighting: [===============-----------------------------------] 31% (2 threads) Inverse distance weighting: [================----------------------------------] 32% (2 threads) Inverse distance weighting: [================----------------------------------] 33% (2 threads) Inverse distance weighting: [=================---------------------------------] 34% (2 threads) Inverse distance weighting: [=================---------------------------------] 35% (2 threads) Inverse distance weighting: [==================--------------------------------] 36% (2 threads) Inverse distance weighting: [==================--------------------------------] 37% (2 threads) Inverse distance weighting: [===================-------------------------------] 38% (2 threads) Inverse distance weighting: [===================-------------------------------] 39% (2 threads) Inverse distance weighting: [====================------------------------------] 40% (2 threads) Inverse distance weighting: [====================------------------------------] 41% (2 threads) Inverse distance weighting: [=====================-----------------------------] 42% (2 threads) Inverse distance weighting: [=====================-----------------------------] 43% (2 threads) Inverse distance weighting: [======================----------------------------] 44% (2 threads) Inverse distance weighting: [======================----------------------------] 45% (2 threads) Inverse distance weighting: [=======================---------------------------] 46% (2 threads) Inverse distance weighting: [=======================---------------------------] 47% (2 threads) Inverse distance weighting: [========================--------------------------] 48% (2 threads) Inverse distance weighting: [========================--------------------------] 49% (2 threads) Inverse distance weighting: [=========================-------------------------] 50% (2 threads) Inverse distance weighting: [=========================-------------------------] 51% (2 threads) Inverse distance weighting: [==========================------------------------] 52% (2 threads) Inverse distance weighting: [==========================------------------------] 53% (2 threads) Inverse distance weighting: [===========================-----------------------] 54% (2 threads) Inverse distance weighting: [===========================-----------------------] 55% (2 threads) Inverse distance weighting: [============================----------------------] 56% (2 threads) Inverse distance weighting: [============================----------------------] 57% (2 threads) Inverse distance weighting: [=============================---------------------] 58% (2 threads) Inverse distance weighting: [=============================---------------------] 59% (2 threads) Inverse distance weighting: [==============================--------------------] 60% (2 threads) Inverse distance weighting: [==============================--------------------] 61% (2 threads) Inverse distance weighting: [===============================-------------------] 62% (2 threads) Inverse distance weighting: [===============================-------------------] 63% (2 threads) Inverse distance weighting: [================================------------------] 64% (2 threads) Inverse distance weighting: [================================------------------] 65% (2 threads) Inverse distance weighting: [=================================-----------------] 66% (2 threads) Inverse distance weighting: [=================================-----------------] 67% (2 threads) Inverse distance weighting: [==================================----------------] 68% (2 threads) Inverse distance weighting: [==================================----------------] 69% (2 threads) Inverse distance weighting: [===================================---------------] 70% (2 threads) Inverse distance weighting: [===================================---------------] 71% (2 threads) Inverse distance weighting: [====================================--------------] 72% (2 threads) Inverse distance weighting: [====================================--------------] 73% (2 threads) Inverse distance weighting: [=====================================-------------] 74% (2 threads) Inverse distance weighting: [=====================================-------------] 75% (2 threads) Inverse distance weighting: [======================================------------] 76% (2 threads) Inverse distance weighting: [======================================------------] 77% (2 threads) Inverse distance weighting: [=======================================-----------] 78% (2 threads) Inverse distance weighting: [=======================================-----------] 79% (2 threads) Inverse distance weighting: [========================================----------] 80% (2 threads) Inverse distance weighting: [========================================----------] 81% (2 threads) Inverse distance weighting: [=========================================---------] 82% (2 threads) Inverse distance weighting: [=========================================---------] 83% (2 threads) Inverse distance weighting: [==========================================--------] 84% (2 threads) Inverse distance weighting: [==========================================--------] 85% (2 threads) Inverse distance weighting: [===========================================-------] 86% (2 threads) Inverse distance weighting: [===========================================-------] 87% (2 threads) Inverse distance weighting: [============================================------] 88% (2 threads) Inverse distance weighting: [============================================------] 89% (2 threads) Inverse distance weighting: [=============================================-----] 90% (2 threads) Inverse distance weighting: [=============================================-----] 91% (2 threads) Inverse distance weighting: [==============================================----] 92% (2 threads) Inverse distance weighting: [==============================================----] 93% (2 threads) Inverse distance weighting: [===============================================---] 94% (2 threads) Inverse distance weighting: [===============================================---] 95% (2 threads) Inverse distance weighting: [================================================--] 96% (2 threads) Inverse distance weighting: [================================================--] 97% (2 threads) Inverse distance weighting: [=================================================-] 98% (2 threads) Inverse distance weighting: [=================================================-] 99% (2 threads) Inverse distance weighting: [==================================================] 100% (2 threads)    # Tree detection without considering arguments # For this case study, TLS resolution was established as: # point.dist = 6.34 mm and tls.dist = 10 m  tree.tls <- tree.detection.single.scan(data = pcd,                                         tls.resolution = list(point.dist = 6.34, tls.dist = 10),                                         breaks = 1.3, stem.section = c(1, 5),                                         dir.result = dir.result) #> Computing section: 1.3 m    # }"},{"path":"/reference/weighted_mean_arit.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weighted arithmetic mean. — weighted_mean_arit","title":"Calculate weighted arithmetic mean. — weighted_mean_arit","text":"Calculate weighted arithmetic mean.","code":""},{"path":"/reference/weighted_mean_arit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weighted arithmetic mean. — weighted_mean_arit","text":"","code":"weighted_mean_arit(x, w)"},{"path":"/reference/weighted_mean_arit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weighted arithmetic mean. — weighted_mean_arit","text":"x attribute calculate mean. w vector weights associated x.","code":""},{"path":"/reference/weighted_mean_arit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weighted arithmetic mean. — weighted_mean_arit","text":"Data frame.","code":""},{"path":"/reference/weighted_mean_arit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate weighted arithmetic mean. — weighted_mean_arit","text":"Juan Alberto Molina-Valero,   María José Ginzo Villamayor,   Manuel Antonio Novo Pérez,   Adela Martínez-Calvo,   Juan Gabriel Álvarez-González,   Fernando Montes   César Pérez-Cruzado.","code":""},{"path":"/reference/weighted_mean_geom.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weighted geometric mean. — weighted_mean_geom","title":"Calculate weighted geometric mean. — weighted_mean_geom","text":"Calculate weighted geometric mean.","code":""},{"path":"/reference/weighted_mean_geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weighted geometric mean. — weighted_mean_geom","text":"","code":"weighted_mean_geom(x, w)"},{"path":"/reference/weighted_mean_geom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weighted geometric mean. — weighted_mean_geom","text":"x attribute calculate mean. w vector weights associated x.","code":""},{"path":"/reference/weighted_mean_geom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weighted geometric mean. — weighted_mean_geom","text":"Data frame.","code":""},{"path":"/reference/weighted_mean_geom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate weighted geometric mean. — weighted_mean_geom","text":"Juan Alberto Molina-Valero,   María José Ginzo Villamayor,   Manuel Antonio Novo Pérez,   Adela Martínez-Calvo,   Juan Gabriel Álvarez-González,   Fernando Montes   César Pérez-Cruzado.","code":""},{"path":"/reference/weighted_mean_harm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weighted harmonic mean. — weighted_mean_harm","title":"Calculate weighted harmonic mean. — weighted_mean_harm","text":"Calculate weighted harmonic mean.","code":""},{"path":"/reference/weighted_mean_harm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weighted harmonic mean. — weighted_mean_harm","text":"","code":"weighted_mean_harm(x, w)"},{"path":"/reference/weighted_mean_harm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weighted harmonic mean. — weighted_mean_harm","text":"x attribute calculate mean. w vector weights associated x.","code":""},{"path":"/reference/weighted_mean_harm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weighted harmonic mean. — weighted_mean_harm","text":"Data frame.","code":""},{"path":"/reference/weighted_mean_harm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate weighted harmonic mean. — weighted_mean_harm","text":"Juan Alberto Molina-Valero,   María José Ginzo Villamayor,   Manuel Antonio Novo Pérez,   Adela Martínez-Calvo,   Juan Gabriel Álvarez-González,   Fernando Montes   César Pérez-Cruzado.","code":""},{"path":"/reference/weighted_mean_sqrt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weighted quadratic mean. — weighted_mean_sqrt","title":"Calculate weighted quadratic mean. — weighted_mean_sqrt","text":"Calculate weighted quadratic mean.","code":""},{"path":"/reference/weighted_mean_sqrt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weighted quadratic mean. — weighted_mean_sqrt","text":"","code":"weighted_mean_sqrt(x, w)"},{"path":"/reference/weighted_mean_sqrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weighted quadratic mean. — weighted_mean_sqrt","text":"x attribute calculate mean. w vector weights associated x.","code":""},{"path":"/reference/weighted_mean_sqrt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weighted quadratic mean. — weighted_mean_sqrt","text":"Data frame.","code":""},{"path":"/reference/weighted_mean_sqrt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate weighted quadratic mean. — weighted_mean_sqrt","text":"Juan Alberto Molina-Valero,   María José Ginzo Villamayor,   Manuel Antonio Novo Pérez,   Adela Martínez-Calvo,   Juan Gabriel Álvarez-González,   Fernando Montes   César Pérez-Cruzado.","code":""},{"path":"/articles/plot_design_optimization.html","id":"estimating-optimal-plot-size-without-field-data","dir":"Articles","previous_headings":"","what":"Estimating optimal plot size without field data","title":"Plot design optimization","text":"field data available, function estimation.plot.size can applied determine optimal plot design size. function uses data frame containing list detected trees (introduced tree.tls) estimates stand-level density (\\(N\\), trees/ha) basal area (\\(G\\), m\\(^2\\)/ha) many simulated differently-sized plots three plot designs (circular fixed area, k-tree angle-count) increasing continuously size. Thus, circular fixed area plots increasing radius (increment 0.1 m) maximum radius defined radius.max plot.parameters (default set 25, radius larger furthest tree, horizontal distance furthest tree considered maximum radius) simulated plot, variables (N G) estimated. Similarly, k-tree plots tree numbers (\\(k\\)) ranging 1 k.max (specified plot.parameters, default value set 50 total number trees plot) angle-count plots increasing basal area factor (BAF, increments 0.1 m\\(^2\\)/ha) maximum value specified BAF.max plot.parameters (set 4 default) simulated respective stand-level variables calculated. Optionally, minimum diameter breast height (dbh.min, cm) include trees estimations can defined. default minimum \\(dbh\\) set 4 cm. function generates size-estimation charts .e., plots showing estimated stand-level density (\\(N\\)) basal area (\\(G\\)) \\(y\\) axes respective different plot sizes (\\(x\\) axes). estimations performed simulated plots. default output graphs contain one line plot. average set TRUE, average estimations continous line standard deviation grey shaded area drawn instead multiple lines sample plot. One chart plot design drawn default. .plot.designs set TRUE, line charts three plot design drawn one graph.  continuous line represents average plots (.e. 16 plots example shown ) estimated density (\\(N\\)) left basal area (\\(G\\)) right. dotted line indicates number plots. figure helps find suitable plot design calculation stand-level metrics variables. optimal plot design size chosen within range estimated values \\(N\\) \\(G\\) reach stable level. small plot leads high errors estimation, since sample small. example, example basal area estimated fixed area plots radius smaller 5 m higher true value. hand, large plots come along systematic errors due occlusion trees. Therefore, example basal area fixed area plots radius bigger 20 m estimated lower true value. order avoid types errors, figure helps find plot size range stable values.","code":"estimation.plot.size(tree.tls = tree.tls,                      plot.parameters = data.frame(radius.max = 25, k.max = 50, BAF.max = 4),                      dbh.min = 4,                      average = TRUE, all.plot.designs = FALSE)"},{"path":"/articles/plot_design_optimization.html","id":"validation-with-field-data-and-optimizing-plot-design","dir":"Articles","previous_headings":"","what":"Validation with field data and optimizing plot design","title":"Plot design optimization","text":"data field measurements available sample plots, TLS-based estimates can validated optimal plot designs can found applying functions implemented FORTLS. first step optimization process, function simulations simulates plots incremental size computes corresponding stand-level metrics variables (similar function metrics.variables, see <stand-level vignette). Based simulated data, two different processes can performed. First, bias TLS data field data individual estimated variable can assessed function relative.bias. Second, correlations estimated variables metrics based TLS-data (output data simulation function) variables estimated field data can calculated correlations function. function calculates Pearson Spearman correlation coefficients. visualize correlation coefficients, heatmaps can drawn optimize.plot.design function.","code":""},{"path":"/articles/plot_design_optimization.html","id":"plot-simultaion-and-estimation-of-metrics-and-variables","dir":"Articles","previous_headings":"Validation with field data and optimizing plot design","what":"Plot simultaion and estimation of metrics and variables","title":"Plot design optimization","text":"simulations function applied follows:","code":"simulations <- simulations(tree.tls = tree.tls, tree.ds = tree.ds, tree.field = tree.field,             plot.design = c(\"fixed.area\", \"k.tree\", \"angle.count\"),             plot.parameters = data.frame(radius.max = 25, k.max = 50, BAF.max = 4),             scan.approach = \"single\", var.metr = list(tls = NULL, field = NULL),             dbh.min = 4, h.min = 1.3, max.dist = Inf,             dir.data = dir.data, save.result = FALSE, dir.result = NULL)"},{"path":"/articles/plot_design_optimization.html","id":"the-input-data-frames","dir":"Articles","previous_headings":"Validation with field data and optimizing plot design > Plot simultaion and estimation of metrics and variables","what":"The input data frames","title":"Plot design optimization","text":"TLS field data sample plots required compute function. TLS data introduced tree.tls format data frame returned tree.detection.single.scan tree.detection.multi.scan functions. Thus, row must correspond detected tree must contain least following columns: id, file, tree, x, y, phi.left, phi.right, horizontal.distance, dbh, num.points, num.points.hom, num.points.est, num.points.hom.est partial.occlusion. data frame containing field data must inserted argument tree.field. Similar TLS data table, row must correspond tree (specified columns id tree) values horizontal.distance, dbh, total.height integer value indicating tree dead (1) alive (NA, specified dead) must included data frame. distance sampling method correction occlusion effects applied (function distance.sample, see Stand level vignette), list results output data frames aforesaid function can introduced tree.ds. list must contain least data frame tree detection probabilities (P.hn, P.hn.cov, P.hr P.hr.cov) tree. default tree.ds set NULL result, calculations variables based occlusion detection performed.","code":""},{"path":"/articles/plot_design_optimization.html","id":"specifying-designs-of-simulated-plots","dir":"Articles","previous_headings":"Validation with field data and optimizing plot design > Plot simultaion and estimation of metrics and variables","what":"Specifying designs of simulated plots","title":"Plot design optimization","text":"vector containing names plot designs can specify plot designs (\"fixed.area\", \"k.tree\", \"angle.count\") considered simulations plot.design. default, argument set NULL three plots designs considered. Furthermore argument plot.parameters allows manually specifying design simulated plots. Many differently-sized plots plot designs specified plot.design simulated. list introduced plot.parameters can include following elements customize generated plots. elements radius.max, k.tree.max BAF.max define maximum radius (m), maximum number trees maximum BAF (m\\(^2\\)/ha) respectively sizes circular fixed area, k-tree angle-count plots respectively can increase. default values set radius.max = 25, k.tree.max = 50 BAF.max = 4. increment sizes circular fixed area angle-count plots sequentially increase can also customized specifying elements radius.increment BAF.increment respectively. default settings radius.increment = 0.1 (m) BAF.increment = 0.1 (m\\(^2\\)/ha). additional element list can num.trees defining number dominant trees per hectare (trees/ha). value needed calculation dominant diamters heights set 100 trees/ha default.","code":""},{"path":"/articles/plot_design_optimization.html","id":"further-adjustable-arguments","dir":"Articles","previous_headings":"Validation with field data and optimizing plot design > Plot simultaion and estimation of metrics and variables","what":"Further adjustable arguments","title":"Plot design optimization","text":"Similar functions, scan approach can specified scan.approach default set \"multi\". Metrics variables interest can defined vector var.metr. Thus, metrics variables named vector calculated. specified, var.metr set NULL possible metrics variables computed. arguments dbh.min, h.min max.dist can optionally define minimum \\(dbh\\), height maximum distance tree included calculations. default values dbh.min = 4 (cm), h.min = 1.3 (m) max.dist = NULL (maximal distance considered). argument dir.data specify working directory .txt files normalized reduced point clouds (output normalize function). specified, set NULL current working directory assigned . output files saved default, since argument save.result set TRUE directory path indicated dir.result. plot design (circular fixed area, k-tree angle-count plots), .csv file created using write.csv function utils package.","code":""},{"path":"/articles/plot_design_optimization.html","id":"output-of-the-simulations-function","dir":"Articles","previous_headings":"Validation with field data and optimizing plot design > Plot simultaion and estimation of metrics and variables","what":"Output of the simulations function","title":"Plot design optimization","text":"simulations function generates list one element plot design. elements data frames containing simulated plot. row represents simulated plot defined respective plot identification number id size determined either radius, k BAF depending plot design. columns N, G, V, V.user, W.user, d, dg, dgeom, dharm, h, hg, hgeom hharm display stand-level variables based field data. remaining columns contain stand-level variables metrics estimated plot based TLS data. example data frame circular fixed areas shown . described , plots increasing sizes estimated corresponding variables metrics calculated. plots ordered smallest biggest. Plots small radius can simulated sample plots (see table ), since trees always enter. plots e.g. radius 20 m, can simulated sample sample plots (see end table ).","code":"head(simulations$fixed.area) tail(simulations$fixed.area)"},{"path":"/articles/plot_design_optimization.html","id":"calculation-of-relative-bias","dir":"Articles","previous_headings":"Validation with field data and optimizing plot design","what":"Calculation of relative bias","title":"Plot design optimization","text":"order estimate goodness TLS-based estimation variables, function relative.bias computes relative bias variables estimated field data respective TLS-based estimates. relative bias calculated sample plot simulated plot (.e. different plot sizes designs). Therefore, input data function (introduced simulations) must list data frames containing estimated variables (based field TLS data) simulated plots. Thus, similar list output simulations function (see ) required, description format. Optionally, variables relative bias computed can specified vector variables. , names field data based estimates can introduced. otherwise specified, argument set c(\"N\", \"G\", \"V\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\") default. possible variables dgeom, dharm, dg.0, dgeom.0, dharm.0, hg, hgeom, hharm, hg.0, hgeom.0 hharm.0. arguments save.result dir.result define whether directory output files saved. Two different output files generated. First, data frames plot design (shown circular fixed areas) saved .csv files using write.csv function utils package. Second, interactive line charts representing relative biases saved .html files means saveWidget function htmlwidgets package. function calculates relative bias field data estimates (specified variables) counterpart variables estimated based TLS data. TLS counterparts density (N) variables N.tls, N.hn, N.hr, N.hn.cov, N.hr.cov N.sh circular fixed area k-tree plots, N.tls N.pam angle-count plots. pattern applies basal area (G) volume (V) corresponding TLS-based estimates G.tls, G.hn, G.hr, G.hn.cov, G.hr.cov, G.sh G.pam, V.tls, V.hn, V.hr, V.hn.cov, V.hr.cov, V.sh V.pam respectively. case mean dominant diameters (d, dg, dgeom, dharm, d.0, dg.0, dgeom.0, dharm.0) heights (h, hg, hgeom, hharm, h.0, hg.0, hgeom.0 hharm.0), three plot designs respective counterpart variables d.tls, dg.tls, dgeom.tls, dharm.tls, d.0.tls, dg.0.tls, dgeom.0.tls dharm.0.tls (diameter), h.tls, hg.tls, hgeom.tls, hharm.tls, h.0.tls, hg.0.tls, hgeom.0.tls, hharm.0.tls addition P99 (height). relative bias calculated follows \\[ \\frac{\\frac{1}{n} \\sum_{=1}^{n}y_i - \\frac{1}{n}\\sum_{=1}^{n}x_i}{\\sum_{=1}^{n}x_i} \\] \\(x_i\\) value field estimate \\(y_i\\) value TLS counterpart corresponding plot \\(\\). plot size defined radius, k BAF, biases calculated stored data frame (shown ). row represents simulated plot certain size columns contain calculate bias variables indicated column name. two compared variables joint . separation, e.g. N.N.tls means bias N N.tls calculated. better visualization, line charts created show relative bias given variable plot design. example, interactive graphic showing relative bias basal area estimations (G) fixed plots can seen following link (RB.G.fixed.area.html).","code":"bias <- relative.bias(simulations = simulations,               variables = c(\"N\", \"G\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\"),               save.result = FALSE, dir.result = NULL) #> Computing relative bias for fixed area plots #>  (0.39 secs) #> Computing relative bias for k-tree plots #>  (0.1 secs) #> Computing relative bias for angle-count plots #>  (0.05 secs) head(bias$fixed.area)"},{"path":"/articles/plot_design_optimization.html","id":"functions-facilitating-model-based-or-model-assisted-sampling-approaches","dir":"Articles","previous_headings":"","what":"Functions facilitating model-based or model-assisted sampling approaches","title":"Plot design optimization","text":"facilitate application model-based sampling, two additional functions included FORTLS package. function correlations computes correlations variables estimated field data TLS data calculates respective Pearson Spearman correlation coefficients. results saved .csv files dispayed line charts heat maps (applying function optimize.plot.design).","code":""},{"path":"/articles/plot_design_optimization.html","id":"computing-correlations","dir":"Articles","previous_headings":"Functions facilitating model-based or model-assisted sampling approaches","what":"Computing correlations","title":"Plot design optimization","text":"correlations computes correlations plot designs introduces elements list simulations. format description must output list simulations function. Also similar function relative.bias, variables correlations calculated can specified variables. default, argument set variables = c(\"N\", \"G\", \"V\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\"). one two -mentioned correlation measurments calculated, can specified method. argument set method = c(\"pearson\", \"spearman\") default correlation coefficients computed. addition calculation correlation measures, function also performs tests association returns p-values. output function list containing following three elements correlations, correlations.pval opt.correlations. list including, otherwise specified (method), two elements pearson spearman. two elements lists include separate data frames plot design (circular fixed area, k-tree angle-count plots). data frames contain corresponding correlation coefficients (correlations), calculated p-values (correlations.pval) optimal correlations given plot size field data estimate (opt.correlations). mentioned data frames divided rows represent given plot size defined radius (circular fixed area plots), k (k-tree plots) BAF (angle-count plots). columns data frames correlations (shown ) correlations.pval (shown ) contain calculated coefficients p-values respectively corresponding correlation. column names composed two variables (e.g. N N.tls) separated . (giving N.N.tls) described relative.bias function. data frames opt.correlations list (example shown ) also divided rows represent different plot sizes. given plot size variable (specified argument variables), best correlating TLS-based estimate corresponding correlation coefficient displayed table. columns named <variable>.metric (variable N, G, d, dg, d.0, h h.0) contain TLS-based variable metric yielded best correlation respective field data-based variable column name certain plot radius. columns <variable>.cor display measures respective correlations. correlations functions creates different files saves (save.result = TRUE, default setting) directory indicated dir.result. files , one hand, .csv files data frames lists correlations opt.correlations created means write.csv function utils package. .csv files named correlations.<plot design>.<method>.csv opt.correlations.<plot design>.plot.<method>.csv plot design \"fixed.area.plot\", “k.tree.plot” “angle.count.plot” method “pearson” “spearman”. hand, interactive line charts representing correlation coefficients created variable (selected variables) .html file using saveWidget function htmlwidgets package. example, interactive line chart variable height (h) fixed area plots (pearson measure) shown (correlations.h.fixed.area.pearson.html).","code":"cor <- correlations(simulations = simulations,              variables = c(\"N\", \"G\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\"),              method = c(\"pearson\", \"spearman\"),               save.result = FALSE, dir.result = NULL) #> Computing correlations for fixed area plots #>  (126.19 secs) #> Computing correlations for k-tree plots #>  (31.99 secs) #> Computing correlations for angle-count plots #>  (24.37 secs) cor$correlations$pearson$fixed.area[20:26,1:15] cor$correlations.pval$pearson$fixed.area[20:26,1:15] cor$opt.correlations$pearson$fixed.area[20:26,]"},{"path":"/articles/plot_design_optimization.html","id":"visualizing-correlations","dir":"Articles","previous_headings":"Functions facilitating model-based or model-assisted sampling approaches","what":"Visualizing correlations","title":"Plot design optimization","text":"order visualize optimal correlations, function optimize.plot.design creates heat maps applied follows: function creates heatmaps based optimal correlation list (opt.correlations output correlations function) introduced correlations. introduced list must format description opt.correlation list. Similar functions described , variables interest can selected variables (default setting: variables = c(\"N\", \"G\", \"V\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\")). function generates interactive heatmaps saveWidget function htmlwidgets package saves graphics directory indicated dir.result (default working directory). plot design correlation measure one plot generated named opt.correlations.<plot design>.<method>.html plot design can “fixed.area.plot”, “k.tree.plot” “angle.count.plot” method either “pearson” “spearman” according plot design correlation measure. show example, heatmap pearson correlation coefficient fixed area plots pearson measure can seen opening link (opt.correlations.fixed.area.plot.pearson.html).","code":"optimize.plot.design(correlations = cor$opt.correlations,                      variables = c(\"N\", \"G\", \"d\", \"dg\", \"d.0\", \"h\", \"h.0\"),                      dir.result = NULL)"},{"path":"/articles/stand_level.html","id":"computing-stand-level-metrics-and-variables","dir":"Articles","previous_headings":"","what":"Computing stand-level metrics and variables","title":"Stand-level","text":"order calculate metrics variables stand level, function metrics.variables applied follows: input data frame introduced tree.tls contain information trees detected TLS based data e.g., output data frame functions tree.detection.single.scan tree.detection.multi.scan. path directory .txt files containing reduced point cloud data generated function normalize can specified dir.data otherwise current working directory assigned argument. save.result set save.result = TRUE (default setting), output files saved directory indicated dir.result. scan approach, either TLS single-scan (\"single\") TLS multi-scan SLAM point clouds approaches (\"multi\") specified argument scan.approach. default, argument set \"multi\". selection metrics variables calculated, metrics variables interest can specified vector var.metr. nothing specified, argument set NULL possible metrics variables calculated.","code":"metrics <- metrics.variables(tree.tls = tree.list,                    tree.ds = tree.ds, tree.field = tree.field,                   plot.design = c(\"fixed.area\", \"k.tree\", \"angle.count\"),                   plot.parameters = data.frame(radius = 10, k = 10, BAF = 1),                   scan.approach = \"single\", var.metr = NULL,                   dbh.min = 4, h.min = 1.3, max.dist = Inf,                    dir.data = dir.data, save.result = FALSE, dir.result = NULL)"},{"path":"/articles/stand_level.html","id":"distance-sampling-distance-sampling-function","dir":"Articles","previous_headings":"Computing stand-level metrics and variables","what":"Distance sampling (distance.sampling function)","title":"Stand-level","text":"distance sampling method used correction occlusion effects. distance.sampling function applied, list tree detection probabilities (.e., output file mentioned function) can introduced tree.ds. default, argument set NULL metrics using distance sampling corrections calculated. distance.sampling applied follows: distance.sampling function computes probability detection trees depending distance TLS device. Detection functions fitted histogram representing distribution trees relative horizontal distances. computation detection functions based data frame detected trees, .e. output file tree.detection.single.scan tree.detection.multi.scan (tree.list), introduced argument tree.tls. plots analysed can specified id.plots inserting vector containing plot identification numbers. specified, argument set id.plots = NULL plots considered. Two detection functions fitted, half normal hazard rate functions, without \\(dbh\\) covariate. functions describe decreasing detection probability increasing distance. probabilities used correcting estimation bias stand-level variables caused lack detection trees due occlusion. list three elements generated distance.sampling function. data frame tree represents detection probabilities tree plots according four different detection functions. columns P.hn P.hn.cov show detection probabilities calculated half normal function without \\(dbh\\) covariate, P.hr P.hr.cov contain probabilities according hazard rate function without covariate respectively. data frame par shows parameters detection functions AIC Akaike information criterion (AIC) every detection function fit.","code":"tree.ds <- distance.sampling(tree.tls = tree.list,                              id.plots = NULL,                              strata.attributes = NULL) head(tree.ds$tree) #>   stratum id tree     P.hn  P.hn.cov      P.hr  P.hr.cov #> 1       1  1    1 0.922808 0.9293580 0.9388107 0.9519734 #> 2       1  1    2 0.922808 0.8922843 0.9388107 0.9199997 #> 3       1  1    3 0.922808 0.9146826 0.9388107 0.9389643 #> 4       1  1    4 0.922808 0.9017652 0.9388107 0.9278849 #> 5       1  1    5 0.922808 0.9277925 0.9388107 0.9505678 #> 6       1  1    6 0.922808 0.9424095 0.9388107 0.9637861 head(tree.ds$par) #>              P.hn.scale P.hn.cov.scale.intercept P.hn.cov.dbh P.hr.scale #> X.Intercept.   35.84341                 64.17593    -2.231185   21.85271 #>              P.hr.shape P.hr.cov.scale.intercept P.hr.cov.dbh P.hr.cov.shape #> X.Intercept.   3.544516                 26.38362   -0.7110327       3.832857  head(tree.ds$AIC) #>       P.hn P.hn.cov     P.hr P.hr.cov #> 1 3375.162 3376.521 3374.114 3375.123"},{"path":"/articles/stand_level.html","id":"additional-information-about-trees-through-field-data","dir":"Articles","previous_headings":"Computing stand-level metrics and variables","what":"Additional information about trees through field data","title":"Stand-level","text":"supplementary field data available sample plots, data frame containing information can included tree.field. row data frame must represent tree data frame must contain least following columns: id: plot identification number (character string numeric), must coincide id column tree.tls argument .e., list trees yielded tree detection functions tree: number tree h.dist: horizontal distance (m) tree’s center plot’s center, must coincide centers corresponding TLS plots dbh: tree diameter (cm) breast height (1.3 m) h: total tree height (m) dead: integer value indicating whether tree dead (1) (NA) optional columns h.blc (height based live crown, m), h.bdc (height based dead crown, m), v.user (tree volume, m\\(^3\\)) w.user (tree biomass, Mg).","code":""},{"path":"/articles/stand_level.html","id":"selecting-trees-to-be-included-in-the-calculations","dir":"Articles","previous_headings":"Computing stand-level metrics and variables","what":"Selecting trees to be included in the calculations","title":"Stand-level","text":"arguments dbh.min, h.min max.dist used determine trees included calculations. minimum diameter breast height (\\(dbh\\)) minimum tree height can specified dbh.min (cm) h.min (m) set 4 cm 1.3 m respectively default. max.dist, maximal horizontal distance (m) tree plot’s center included calculations can defined. specified, trees discarded distance.","code":""},{"path":"/articles/stand_level.html","id":"plot-design-and-parameters","dir":"Articles","previous_headings":"Computing stand-level metrics and variables","what":"Plot design and parameters","title":"Stand-level","text":"metrics variables can computed different plot designs specified plot.design plot.parameters. three different plot designs, similar procedure used conventional forest inventories. plot design, used can specified plot.design. default, plot designs considered. name implies, circular fixed area plots (\"fixed.area\") plots circular area defined plot radius (m). size k-tree plots (\"k.tree\") determined number trees (k) enter plot. basal area factor (BAF m\\(^2\\)/ha) defines size angle-count plots (\"angle.count\"). parameters radius, k BAF specified data frame plot.parameters. one parameters specified, corresponding plot design considered calculations. calculate dominant height diameter, number dominant trees per ha (trees/ha) can indicated argument num.tree. default, number dominant trees set 100 trees/ha.","code":""},{"path":"/articles/stand_level.html","id":"output-files","dir":"Articles","previous_headings":"Computing stand-level metrics and variables","what":"Output files","title":"Stand-level","text":"function metrics.variables generates list element represents one considered plot designs (fixed area, k-tree angle-count plots). elements data frames containing estimated metrics variables stand-level columns (described ). columns include information plot, identification number (id) stratum identification (stratum) coinciding respective columns output file tree.detection functions. row represents simulated plot .e., plot certain size (defined values radius, k BAF shown respective columns). save.result = TRUE, data frames saved seperate .csv files (one plot design) directory indicated dir.result (specified working directory). .csv files (without row names) created using write.csv function utils package.","code":""},{"path":"/articles/stand_level.html","id":"stand-level-metrics","dir":"Articles","previous_headings":"Computing stand-level metrics and variables","what":"Stand-level metrics","title":"Stand-level","text":"stand-level metrics statistical descriptive values, percentiles, standard deviation means, well number points belonging normal section point cloud. values n.pts, n.pts.est, n.pts.red n.pts.red.est indicate number points estimated number points respectively belong tree’s normal section (1.3 m +/- 0.05 m). calculated original point cloud (n.pts, n.pts.est) reduced point cloud (n.pts.red, n.pts.red.est). Furthermore, height percentiles (P01, P05, P10, P20, P25, P30, P40, P50, P60, P70, P75, P80, P90, P95, P99, numbers indicating k-th percentile) calculated \\(z\\) coordinate TLS point cloud. Therefore denominate height (m) ground level.","code":"metrics[1:6, -c(3:36)]"},{"path":"/articles/stand_level.html","id":"statistics-of-the-z-rho-and-r","dir":"Articles","previous_headings":"Computing stand-level metrics and variables > Stand-level metrics","what":"Statistics of the z, rho and r","title":"Stand-level","text":"describe tendencies distribution spherical coordinates z, \\(\\rho\\) (horizontal distance, rho) r (euclidean distance), following statistics calculated: arithmetic (mean.arit.z/rho/r), quadratic (mean.qua.z/rho/r), geometric (mean.geom.z/rho/r) harmonic means (mean.harm.z/rho/r) median (median.z/rho/r) mode (mode.z/rho/r) variance (var.z/rho/r) standard deviation (sd.z/rho/r) coefficient variation (CV.z/rho/r) range (D.z/rho/r) interquartile range (ID.z/rho/r) maximum (max.z/rho/r) minimum (min.z/rho/r) kurtosis (kurtosis.z/rho/r) skewness (skewness.z/rho/r) percentage points arithmetic mean (p..mean.z/rho/r) mode (p..mode.z/rho/r) percentage points arithmetic mean (p.b.mean.z/rho/r) mode (p.b.mode.z/rho/r) percentage points height 2 m (p..2m.z, \\(z\\) coordinate) percentage points height 2 m (p.b.2m.z, \\(z\\) coordinate) L-moments order 2, 3 4 (L2.z/rho/r, L3.z/rho/r L4.z/rho/r) third forth central L-moments (L3.mu.z/rho/r L4.mu.z/rho/r) ratio L1 L2 moments (L.CV.z/rho/r) median absolute deviation overall median (median..d.z/rho/r) mode absolute deviation overall mode (mode..d.z/rho/r) Canopy relief ratio .e., ration mean.z/rho/r max.z/rho/r (CRR.z/rho/r) scale shape parameters Weibull distribution fitted spherical coordinates (weibull_c.z/rho/r, weibull_b.z/rho/r)","code":""},{"path":"/articles/stand_level.html","id":"stand-level-variables","dir":"Articles","previous_headings":"Computing stand-level metrics and variables","what":"Stand-level variables","title":"Stand-level","text":"variables estimated based tree attributes detected trees point cloud data (output functions tree.deteection.single.scan tree.deteection.multi.scan) similar procedure conventional forest inventories. values computed stand-level therefore extended area one ha.","code":"metrics[1:6, 1:36]"},{"path":"/articles/stand_level.html","id":"stand-density-n-volume-v-and-basal-area-g","dir":"Articles","previous_headings":"Computing stand-level metrics and variables > Stand-level variables","what":"Stand density (N), volume (V) and basal area (G)","title":"Stand-level","text":"stand density (N.tls, trees/ha) calculated following equations. circular fixed area k-tree plots, N.tls calculated \\[ N.tls=\\frac{10000}{\\pi R^2}\\cdot n \\] \\(R\\) radius plot (m) \\(n\\) number detected trees. density angle-count plots calculated \\[ N.tls=\\sum_{=1}^{n} \\frac{BAF}{g_i} \\] \\(BAF\\) basal area factor (m\\(^2\\)/ha) \\(g_i\\) basal area tree \\(\\) (m\\(^2\\)). basal area (G.tls, m\\(^2\\)/ha) estimated circular fixed area k-tree plots following equation: \\[ G.tls=\\frac{10000}{\\pi R^2}\\sum_{=1}^{n} g_i \\] angle-count plots, following equation applied: \\[ G.tls=BAF \\cdot n \\] stem volume (V.tls, m\\(^3\\)/ha) estimated modelling stem profile paraboloid. volume calculated volume revolution paraboloid function. total heights detected trees estimated 99th percentile points \\(z\\) coordinate delimited Voronoi polygons (\\(h_{P_{99}}\\), m). equation used calculation circular fixed area k-tree plots \\[ V.tls=\\frac{10000}{\\pi R^2}\\sum_{=1}^{n} \\pi \\cdot \\frac{h_{P_{99}}^2}{2} \\cdot \\frac{(\\frac{1}{2} \\cdot dbh_i)^2}{(h_{P_{99}} - 1.3)^2} \\] angle-count plots \\[ V.tls=\\sum_{=1}^{n} \\frac{BAF}{g_i} \\cdot \\pi \\cdot \\frac{h_{P_{99}}^2}{2} \\cdot \\frac{(\\frac{1}{2} \\cdot dbh_i)^2}{(h_{P_{99}} - 1.3)^2} \\]","code":""},{"path":"/articles/stand_level.html","id":"occlusion-correction","dir":"Articles","previous_headings":"Computing stand-level metrics and variables > Stand-level variables","what":"Occlusion correction","title":"Stand-level","text":"mentioned calculations stand-level variables \\(N\\), \\(V\\) \\(G\\) consider possible occlusions trees. Therefore, different occlusion correction approaches included function. angle-count plots, occlusion correction based Poisson attenuation model. approach calculates geometric gap probabilities decreases increasing distance TLS device follow Poisson distribution. calculations stand density, volume basal area corrected factor accounting gap probabilities corrected variables called N.pam, V.pam G.pam respectively. details see Strahler et al. (20081) Lovell et al. (20112). two plot designs (circular fixed area k-tree plots) different occlusion correction approaches applied. One approach based distance sampling data can therefore used function distance.sampling used (.e., tree.ds argument specified NULL). Functions based point transect sampling describe probability tree detection decreases increasing distance TLS device used calculation. functions applied calculation variables N.hn/V.hn/G.hn N.hr/V.hr/G.hr Half-Normal Hazard-Rate respectively. Additionally, N.hn.cov/V.hn.cov/G.hn.cov N.hr.cov/V.hr.cov/G.hr.cov calculated expanding scale component function \\(dbh\\) covariate. approach corrects shadowing effects. Tthis method calculates expansion factor correct variables. expansion factor based percentage shaded area .e., unsample area seen TLS device due masking trees. corrected calculated variables called N.sh/V.sh/G.sh. details see Seidel Ammer (20143).","code":""},{"path":"/articles/stand_level.html","id":"mean-and-dominant-heights-h-and-diameters-d","dir":"Articles","previous_headings":"Computing stand-level metrics and variables > Stand-level variables","what":"Mean and dominant heights (h) and diameters (d)","title":"Stand-level","text":"mean heights (m) diameters (cm) calculated arithmetic (h.tls, d.tls), quadratic (h.g, d.g), geometric (h.geom, d.geom) harmonic means (h.harm, d.harm). calculate dominant heights diameters, \\(n\\) largest trees per hectar considered. otherwise specified argument num.tree (see ), number dominant trees per hectare set 100 trees/ha. Dominant heights diameters also calculated arithmetic (h.0.tls, d.0.tls), quadratic (h.0.g, d.0.g), geometric (h.0.geom, d.0.geom) harmonic means (h.0.harm, d.0.harm).","code":""},{"path":"/articles/tree_level.html","id":"normalization","dir":"Articles","previous_headings":"","what":"Normalization","title":"Tree-level","text":"aim normalization process obtain coordinates relative plot’s center ground level. process, functions readLAS, clip_circle, classify_ground, grid_terrain normalize_height lidR package used internally (Roussel et al., 20201). following steps executed: Classification points “ground” “ground” cloth simulation filter (CSF) algorithm (Zhang et al., 20162) Generation digital terrain model (DTM) spatial interpolation points classified “ground” Normalization point cloud subtracting DTM computation Cartesian, cylindrical spherical coordinates Reduction density point cloud. case single-scan approach data, densitiy reduced point cropping (PCP) algorithm (Molina-Valero et al., 20193) case multi-scan approach data, point density reduction based random selection points following figure shows normalized point cloud used example data . function plot lidR package used generate figure.","code":"multiLAS <- readLAS(paste(dir.data, \"Galicia_multi_scan.laz\", sep = \"/\")) lidR::plot(multiLAS, color = \"RGB\")"},{"path":"/articles/tree_level.html","id":"the-arguments-of-normalize","dir":"Articles","previous_headings":"Normalization","what":"The arguments of normalize","title":"Tree-level","text":"normalize function applied follows: name .las .laz file containing point cloud data introduced las argument must include .las/.laz extension. Optionally, plot identification number (id) file name (file) can defined. set NULL default, assigns 1 plot identification number 1.txt (name identification number) reduced point cloud saved working directory specified dir.result. directory input .las/.laz files output file can specified dir.data dir.result respectively. specified, current working directory used. output .txt files containing reduced point clouds saved otherwise specified save.result (save.result = TRUE default). point cloud input file already normalized, argument normalized can set normalized = TRUE (default setting normalized = NULL). result, one part internal normalization process skipped. Furthermore scanning approach applied data collection must specified scan.approach \"single\" (set default) indicating TLS single-scan approach \"multi\" indicating TLS multi-scan SLAM point clouds approaches.","code":"pcd.single <- normalize(las = \"Galicia_single_scan.laz\",                   normalized = NULL,                  x.center = 0, y.center = 0,                  max.dist = 15, min.height = NULL, max.height = NULL,                   algorithm.dtm = \"knnidw\", res.dtm = 0.2,                  csf = list(cloth_resolution = 0.5),                  RGB = TRUE,                  scan.approach = \"single\",                  id = NULL, file = \"single.txt\",                  dir.data = dir.data, save.result = FALSE, dir.result = NULL)"},{"path":"/articles/tree_level.html","id":"defining-the-point-cloud","dir":"Articles","previous_headings":"Normalization > The arguments of normalize","what":"Defining the point cloud","title":"Tree-level","text":"planimetric coordinates \\(x\\) \\(y\\) center default x.center = 0 y.center = 0. coincide point cloud data, coordinates plot center must specified x.center y.center. Furthermore size point cloud can reduced arguments max.dist, min.height max.height. maximum horizontal distance meter plot center (max.dist) set, points away discarded. Similarly, minimum maximum height meters (min.height, max.height respectively) defines points discarded, minimum height maximum height relative ground level. default value three arguments NULL. Hence, points discarded point cloud normalization.","code":""},{"path":"/articles/tree_level.html","id":"adjusting-the-algorithms-applied-in-normalize-function","dir":"Articles","previous_headings":"Normalization > The arguments of normalize","what":"Adjusting the algorithms applied in normalize function","title":"Tree-level","text":"order generate DTM, two different algorithms can applied specified algorithm.dtm. Spatial interpolation based k-nearest neighbor approach inverse-distance weighting (knnidw) selected default. second method Delaunay triangulation (tin). resolution DTM (res.dtm) set 0.2 m default can adjusted manually. adjust CSF algorithm, list parameters (e.g. cloth resolution set 0.5 default) can introduced csf. point clouds colorized, RGB values can used improve normalization tree detection process (RGB). colors serve distinguish leaf ground stem points Green Leaf Algorithm (GLA, Louhaichi et al., 20014). GLA algorithm applied remove points point cloud (.e. leaf points), must indicated RGB = TRUE.","code":""},{"path":"/articles/tree_level.html","id":"the-output-data-frame","dir":"Articles","previous_headings":"Normalization","what":"The output data frame","title":"Tree-level","text":"normalize function generates data frame shown . row corresponds one point point cloud input data. columns id, file point indicate plot identification number, file name point number respectively. following columns contain normalized Cartesian, cylindrical spherical coordinates x (distance x axis m), y (distance y axis m), z (height relative ground level m), rho (horizontal distance m), phi (angle rad), r (radial distance m) theta (polar angle rad). column slope displays slope terrain given rad. GLA algorithm used, column GLA shows results algorithm. Furthermore, selection probability assigned point applying PCP algorithm (prob) column prob.select shows selected plots (indicated 1) discarded points (indicated 0). .txt file saved directory indicated dir.result (save.result = TRUE) contains similar data frame shown . However, data frame include reduced point cloud, .e. selected points (prob.select = 1). data frame saved without row names .txt file using vroom_write function vroom package.","code":"head(pcd.single)"},{"path":"/articles/tree_level.html","id":"tree-detection","dir":"Articles","previous_headings":"","what":"Tree detection","title":"Tree-level","text":"tree detection functions include algorithms detect many trees possible point clouds. Additionally, diameter 1.3 m ground level (diameter breast height, \\(dbh\\)) estimated coordinates tree’s center calculated detected tree. Depending TLS approach, different tree detection functions used.","code":""},{"path":"/articles/tree_level.html","id":"data-from-tls-single-scan-approach","dir":"Articles","previous_headings":"Tree detection","what":"Data from TLS single-scan approach","title":"Tree-level","text":"single-scan approach used collect data, function tree.detection.single.scan can applied follows: normalized reduced point cloud, .e. output normalize function, input data frame function (data). different arguments can specified explained .","code":"tls.resolution = list(point.dist = 6.34, tls.dist = 10)  tree.list.single.tls <- tree.detection.single.scan(data = pcd.single,                            dbh.min = 4, dbh.max = 200, h.min = 1.3,                            ncr.threshold = 0.1,                            tls.resolution = tls.resolution,                            d.top = NULL,                            plot.attributes = NULL,                            breaks = c(1.0, 1.3, 1.6), stem.section = c(1,5),                            save.result = FALSE, dir.result = NULL) #> Computing section: 1 m #> Computing section: 1.3 m #> Computing section: 1.6 m"},{"path":"/articles/tree_level.html","id":"defining-the-range-of-diameters-and-heights-of-possible-trees","dir":"Articles","previous_headings":"Tree detection > Data from TLS single-scan approach","what":"Defining the range of diameters and heights of possible trees","title":"Tree-level","text":"dbh.min dbh.max, range possible tree diameters can specified. Hence, cluster points bigger diameter dbh.min smaller diameter dbh.max considered possible trees. Additionally, min.height defines minimum height possible tree point cluster considered tree. manually specified, values set dbh.min = 4, dbh.max = 200 (values cm) h.min = 1.3 (value m).","code":""},{"path":"/articles/tree_level.html","id":"resolution-of-the-tls","dir":"Articles","previous_headings":"Tree detection > Data from TLS single-scan approach","what":"Resolution of the TLS","title":"Tree-level","text":"resolution TLS scan (tls.resolution) can defined either aperture angle distance consecutive points. aperture angle determined horizontal vertical aperture angles (horizontal.angle vertical.angle). choosing angle define TLS resolution, elements must part list required tls.resolution = list(horizontal.angle, vertical.angle). second option determine resolution considers distance two consecutive points (point.dist) certain distance TLS device (tls.dist) also given list shown example .","code":""},{"path":"/articles/tree_level.html","id":"including-further-information-about-the-plots","dir":"Articles","previous_headings":"Tree detection > Data from TLS single-scan approach","what":"Including further information about the plots","title":"Tree-level","text":"plot.attributes data frame attributes plot level (e.g. strata) can inserted additional information. data frame must contain column named id coinciding used id argument function normalize. strata, column specifying strata must named stratum (numeric) functions (e.g., estimation.plot.size metrics.variables). argument specified, set NULL default function add possible plot attributes.","code":""},{"path":"/articles/tree_level.html","id":"algorithm-to-distinguish-stem-points-and-foliage-points","dir":"Articles","previous_headings":"Tree detection > Data from TLS single-scan approach","what":"Algorithm to distinguish stem points and foliage points","title":"Tree-level","text":"order distinguish stem points points belonging thin branches foliage, local surface variation, also known normal change rate (NCR) calculated point. quantitative measure curvature feature (Pauly et al., 20025). point, NCR index estimated local neighborhood radius 5 cm. radius considered suitable stem separation forests (Ma et al. 20156; Xia et al., 20157). Higher NCR values indicate curved surfaces e.g. branches foliage. Therefore, threshold (ncr.threshold) established, can modified manually. defalut set 0.1 according Zhang et al. (20198), meaning points higher NCR value threshold discarded.","code":""},{"path":"/articles/tree_level.html","id":"algorithms-for-identification-of-trees","dir":"Articles","previous_headings":"Tree detection > Data from TLS single-scan approach","what":"Algorithms for identification of trees","title":"Tree-level","text":"order improve detection trees, point cloud reduced removing parts trees. argument stem.section serves identify part point cloud, .e. range coordinate \\(z\\), contains less bushes, branches disruptive points. Hence, range coordinate \\(z\\) therefore belt-like area selected, either defining range manually internal algorithm. belt-like area includes predominantly stems trees. Within horizontal area, point clusters higher density chosen, supposedly stems trees. Applying circular buffer around stems, vertical cylinders created, contain stems. following algorithms vertical cylindrical parts point cloud used detect trees. cylinders selected point cloud, breaks defines height (m) horizontal slices tree detection algorithms applied. otherwise specified, slices taken every 0.3 m starting height 0.4 m reaching maximum height. slices extension 0.1 m (height slice +/- 5 cm). slice following algorithms applied: Removal branches foliage: NCR values calculated point points kept stem points NCR value lower predefined threshold (ncr.threshold) Clustering points: clustering process applied horizontal projection point’s Cartesian coordinates .e., \\(x\\) \\(y\\) coordinates considered. Density-Based Spatial Clustering Applications based Noise (DBSCAN) method (Ester et al., 19969) implemented dbscan function dbscan package used perform clustering. radius epsilon neighborhood (eps) defined minimum distance two consecutive points furthest distance plot center respective horizontal slice Removing points belonging remaining branches foliage: Two characteristics used distinguish stem branch clusters. First, density stem sections higher branch foliage sections. second, stem points predominant vertical distribution. Hence, point cloud vertical projected dissected grid, cells stems higher point density cells leafs branches. Points cells lower density median density removed point cloud Calculation center potential tree section: center considered point variance distances cluster points potential center point reaches lowest value Classification clusters: order decide whether clusters belong tree section, different geometric features considered. First, calculated center tree section must located behind stem point clusters relative TLS position. Second, points located behind tree surface relative TLS position. third, clusters form arc, implicates extreme points lay away TLS points middle. explained , algorithms applied horizontal slices (defined breaks). Thus, tree sections identified different heights. sections belong tree joined applying DBSCAN algorithm horizontal projection different sections. Thereafter, tree attributes can estimated.","code":""},{"path":"/articles/tree_level.html","id":"estimation-of-tree-attributes","dir":"Articles","previous_headings":"Tree detection > Data from TLS single-scan approach","what":"Estimation of tree attributes","title":"Tree-level","text":"diameter detected trees (\\(dbh\\)) obtained 1.3 m double radius. tree detected section 1.3 m, \\(dbh\\) estimated fitting linear taper function radius response variable section heights explanatory variables. Thus, function allows estimate radius 1.3 m calculate \\(dbh\\). argument d.top defines top stem diameter (cm), used calculation commercial stem volume. argument specified, commercial stem volume (v.com) calculated.","code":""},{"path":"/articles/tree_level.html","id":"the-output-data-frame-1","dir":"Articles","previous_headings":"Tree detection > Data from TLS single-scan approach","what":"The output data frame","title":"Tree-level","text":"data frame shown output tree.detect.single.scan function. row represents detected tree (consecutively numbered column tree). columns id file display plot identification number file name respectively equal columns normalize output table. coordinates detected trees given Cartesian coordinates tree’s center (x y, m) azimuthal angles center (phi rad), left border (phi.left rad), right border (phi.right rad) horizontal distance tree’s center plot’s center (h.dist m). Furthermore, tree attributes dbh (diameter breast height cm), h (total height m), v (tree stem volume m\\(^3\\)) estimated. d.top defined argument, volume stem ground height diameter given d.top estimated (commercial stem volume, v.com m\\(^3\\)). tree, number points normal section slice (1.3 m +/- 0.05 m) original point cloud reduced point cloud (n.pts n.pts.red respectively) calculated also estimated (n.pts.est n.pts.red.est respectively). column partial.occlusion describes whether detected tree partially occluded (1) (0). data frame saved .csv file without row names using write.csv function utils package.","code":"head(tree.list.single.tls)"},{"path":"/articles/tree_level.html","id":"data-from-tls-multi-scan-approach","dir":"Articles","previous_headings":"Tree detection","what":"Data from TLS multi-scan approach","title":"Tree-level","text":"multiple scans performed sampling plot (multi-scan approach) SLAM devices used, function tree.detection.multi.scan can applied follows . Additionally, function normalize must adjusted specifying scan.approach = \"multi\". function tree.detection.multi.scan comes along arguments function tree.detection.single.scan, described “Data TLS single-scan approach”. However, instead specifying resolution, precision TLS (m) can defined tls.precision. defined, default value 0.03 m. procedure remains output data frame contains columns explained : following figure shows point cloud (\"Galicia_multi_scan.laz\") . trees detected tree.detection.multi.scan function labeled red belt 1.3 m.","code":"pcd.multi <- normalize(las = \"Galicia_multi_scan.laz\",                   x.center = 0, y.center = 0, RGB = TRUE,                  scan.approach = \"multi\", file = \"multi.txt\",                  dir.data = dir.data, save.result = FALSE)  tree.list.multi.tls <- tree.detection.multi.scan(data = pcd.multi,                           dbh.min = 4, dbh.max = 200, h.min = 1.3,                           ncr.threshold = 0.1,                           tls.precision = 0.03,                           breaks = c(1.0, 1.3, 1.6), stem.section = c(1,5),                           d.top = NULL,                           plot.attributes = NULL,                           save.result = FALSE, dir.result = NULL) #> Loading required namespace: rgeos #> Computing section: 1 m #> Computing section: 1.3 m #> Computing section: 1.6 m head(tree.list.multi.tls)"},{"path":"/articles/tree_level.html","id":"automatic-normalization-and-tree-detection-of-several-plots","dir":"Articles","previous_headings":"Tree detection","what":"Automatic normalization and tree detection of several plots","title":"Tree-level","text":"data multiple plots analysed, function tree.detection.several.plots can used. function conducts normalization tree detection processes plot automatically. result tables (explained ) stored directly separately plot. Hence, error occurs one plot, results previously analysed plots stored. function, arguments normalize tree.detection functions must specified explained . function applied follows: names .las files introduced character vector las.list. Optionally, vectors plot identification numbers file names can specified id file. specified, plots named correspondent numbers 1 n plots (id) respective id “id.txt” file names. arguments can specified explained sections . input files analysed successively. finishing analysis one plot, reduced point cloud .txt file tree list .csv file saved directory indicated dir.results.","code":"files <- list.files(pattern = \"las$\")  tls.resolution = list(point.dist = 7.67, tls.dist = 10)  tree.list.tls <- tree.detection.several.plots(las.list = files,                        id = NULL, file = NULL,                       scan.approach = \"multi\",                       x.center = 0, y.center = 0,                       max.dist = 20, min.height = 0.1, max.height = NULL,                       algorithm.dtm = \"knnidw\", res.dtm = 0.2,                        csf = list(cloth_resolution = 0.5),                                              dbh.min = 7, dbh.max = 200, h.min = 1.3,                       tls.resolution = tls.resolution,                       ncr.threshold = 0.05,                       breaks = c(0.5, 1, 1.3, 1.6, 2, 2.5, 3),                       stem.section = c(0.5, 4),                       d.top = NULL, plot.attributes = NULL,                       dir.data = dir.data, save.result = FALSE, dir.result = NULL)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Juan Alberto Molina-Valero. Author, copyright holder, maintainer. Adela Martínez-Calvo. Author, compiler. Anika Seppelt. Author, compiler. Juan Gabriel Álvarez-González. Author, thesis advisor. Fernando Montes. Author. César Pérez-Cruzado. Author, thesis advisor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molina-Valero, J. ., Martínez-Calvo, ., Ginzo Villamayor, M. J., Novo Pérez, M. ., Álvarez-González, J. G., Montes, F., Pérez-Cruzado, C. (2022). Operationalizing use TLS forest inventories: R package FORTLS. Environmental Modelling & Software, 105337. <doi.org/10.1016/j.envsoft.2022.105337>. Juan Alberto Molina-Valero, Adela Martínez-Calvo, Anika Seppelt, Juan Gabriel Álvarez-González, Fernando Montes César Pérez-Cruzado (2022). Automatic Processing Terrestrial-Based Technologies Point Cloud Data Forestry Purposes. R package version 1.2.0. https://CRAN.R-project.org/package=FORTLS","code":"@Article{,   author = {Juan Alberto Molina-Valero and Adela Martínez-Calvo and Maria José Ginzo-Villamayor and Manuel Antonio Novo Pérez and Juan Gabriel Álvarez-González and Fernando Montes and César Pérez-Cruzado},   title = {Operationalizing the use of TLS in forest inventories: The R package FORTLS},   journal = {Environmental Modelling & Software},   pages = {105337},   year = {2022},   doi = {10.1016/j.envsoft.2022.105337},   url = {https://www.sciencedirect.com/science/article/pii/S1364815222000433}, } @Manual{,   title = {Automatic Processing of Terrestrial-Based Technologies Point Cloud Data for Forestry Purposes},   author = {Juan Alberto Molina-Valero and Adela Martínez-Calvo and Anika Seppelt and Juan Gabriel Álvarez-González and Fernando Montes and César Pérez-Cruzado},   year = {2022},   note = {R package version 1.2.0},   url = {https://CRAN.R-project.org/package=FORTLS}, }"},{"path":[]},{"path":"/index.html","id":"automatic-processing-of-terrestrial-based-technologies-point-cloud-data-for-forestry-purposes","dir":"","previous_headings":"","what":"Automatic Processing of Terrestrial-Based Technologies Point Cloud Data for Forestry Purposes","title":"Automatic Processing of Terrestrial-Based Technologies Point Cloud Data for Forestry Purposes","text":"Process automation point cloud data derived terrestrial-based technologies Terrestrial Laser Scanner (TLS) Simultaneous Localization Mapping (SLAM). ‘FORTLS’ enables () detection trees estimation tree-level attributes (e.g. diameters heights), (ii) estimation stand-level variables (e.g. density, basal area, mean dominant height), (iii) computation metrics related important forest attributes estimated Forest Inventories (FIs) stand-level, (iv) optimization plot design combining TLS data field measured data. Documentation ‘FORTLS’ described Molina-Valero et al. (2022, https://doi.org/10.1016/j.envsoft.2022.105337).","code":""},{"path":"/index.html","id":"install-fortls-120-beta-version","dir":"","previous_headings":"","what":"Install FORTLS 1.2.0 (Beta version)","title":"Automatic Processing of Terrestrial-Based Technologies Point Cloud Data for Forestry Purposes","text":"Get latest released version FORTLS GitHub (included devel branch)","code":"remotes::install_github(\"Molina-Valero/FORTLS\", ref = \"devel\", dependencies = TRUE)"},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Automatic Processing of Terrestrial-Based Technologies Point Cloud Data for Forestry Purposes","text":"FORTLS developed University Santiago de Compostela. Development FORTLS package possible thanks following projects: Modelling effects intensity perturbation structure natural forests carbon stocks using data National Forestry Inventory (AL2016-76769-C2-2-R) supported Spanish Ministry Science Innovation. Development Galician continuous forest inventory (2020-CP031) supported Regional Government Galicia. Design forest monitoring systems regional scale (ED431F 2020/02) supported Regional Government Galicia.","code":""}]
